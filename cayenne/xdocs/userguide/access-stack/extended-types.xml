<document>
	<title>User Guide - Design</title>
	<toc name="toc-user-guide" chapter="13. Access Stack Internals"/>
	<body>
		<section name="13. Access Stack Internals">
			<subsection name="13.2 Extended Types">
				<p>JDBC specification defines a set of "standard" database 
					column types (defined in java.sql.Types class) and a very 
					specific mapping of these types to Java Object Types, such 
					as java.lang.String, java.math.BigDecimal, etc. Sometimes 
					there is a need to use a custom Java type not known to JDBC 
					driver. CayenneModeler allows to configure an arbitrary 
					Java class as an ObjAttribute type by simply entering a 
					fully-qualified name such class in the type column of an 
					ObjAttribute. However there is more to it than just that. 
					Cayenne needs to know how to instantiate this type from a 
					database "primitive" value, and conversly, how to transform 
					an object of the custom type to a JDBC-compatible 
					object.</p>
					
					<subsection name="13.2.1 Supporting Non-Standard Types">
						<p><a 
							href="../../api/cayenne/org/objectstyle/cayenne/access/types/ExtendedType.html">ExtendedType</a> 
							interface serves to integrate a custom attribute 
							type to Cayenne. An implementation must provide 
							<code>ExtendedType.getClassName()</code> method 
							that returns a fully qualified Java class name for 
							the supported custom type, and a number of methods 
							that convert data between JDBC and custom type. 
							Installing an ExtendedType currently has to be done 
							in the code, some time during Cayenne startup 
							(modeler support will be added in the future). The 
							following code sample demonstrates this 
							procedure:</p>
						<source><![CDATA[// create custom ExtendedType instance
ExtendedType customType = new MyCustomType();

// Find DataNode
DataDomain domain = Configuration.getSharedConfiguration().getDomain();
DataNode node = domain.getNode("node_name_from_the_project");

// install ExtendedType
node.getAdapter().getExtendedTypes().registerType(customType);]]></source>
					</subsection>

			<subsection name="13.2.2 DbAdapters and Extended Types">
				<p>As shown in the example above, ExtendedTypes are stored by 
					DbAdapter. In fact DbAdapters often install their own 
					extended types to address incompatibilities, incompletness 
					and differences between JDBC drivers in handling "standard" 
					JDBC types. For instance some drivers support reading large 
					character columns (CLOB) as java.sql.Clob, but some other - 
					as "character stream", etc. Adapters provided with Cayenne 
					override <code>configureExtendedTypes()</code> method to 
					install their own types, possibly substituting Cayenne 
					defaults. Custom DbAdapters can use the same technique.</p>
			</subsection>
			</subsection>
		</section>
	</body>
</document>