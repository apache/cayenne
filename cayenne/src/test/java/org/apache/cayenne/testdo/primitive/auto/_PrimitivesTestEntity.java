package org.apache.cayenne.testdo.primitive.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.PersistentObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;
import org.apache.cayenne.testdo.primitive.PrimitivesTestEntity;

/**
 * Class _PrimitivesTestEntity was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PrimitivesTestEntity extends PersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<PrimitivesTestEntity> SELF = PropertyFactory.createSelf(PrimitivesTestEntity.class);

    public static final NumericIdProperty<Integer> ID_PK_PROPERTY = PropertyFactory.createNumericId("ID", "PrimitivesTestEntity", Integer.class);
    public static final String ID_PK_COLUMN = "ID";

    public static final BaseProperty<Boolean> BOOLEAN_COLUMN = PropertyFactory.createBase("booleanColumn", Boolean.class);
    public static final BaseProperty<Character> CHAR_COLUMN = PropertyFactory.createBase("charColumn", Character.class);
    public static final NumericProperty<Integer> INT_COLUMN = PropertyFactory.createNumeric("intColumn", Integer.class);

    protected Boolean booleanColumn;
    protected Character charColumn;
    protected int intColumn;


    public void setBooleanColumn(boolean booleanColumn) {
        beforePropertyWrite("booleanColumn", this.booleanColumn, booleanColumn);
        this.booleanColumn = booleanColumn;
    }

	public boolean isBooleanColumn() {
        beforePropertyRead("booleanColumn");
        if(this.booleanColumn == null) {
            return false;
        }
        return this.booleanColumn;
    }

    public void setCharColumn(char charColumn) {
        beforePropertyWrite("charColumn", this.charColumn, charColumn);
        this.charColumn = charColumn;
    }

    public char getCharColumn() {
        beforePropertyRead("charColumn");
        if(this.charColumn == null) {
            return 0;
        }
        return this.charColumn;
    }

    public void setIntColumn(int intColumn) {
        beforePropertyWrite("intColumn", this.intColumn, intColumn);
        this.intColumn = intColumn;
    }

    public int getIntColumn() {
        beforePropertyRead("intColumn");
        return this.intColumn;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "booleanColumn":
                return this.booleanColumn;
            case "charColumn":
                return this.charColumn;
            case "intColumn":
                return this.intColumn;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "booleanColumn":
                this.booleanColumn = (Boolean)val;
                break;
            case "charColumn":
                this.charColumn = (Character)val;
                break;
            case "intColumn":
                this.intColumn = val == null ? 0 : (int)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.booleanColumn);
        out.writeObject(this.charColumn);
        out.writeInt(this.intColumn);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.booleanColumn = (Boolean)in.readObject();
        this.charColumn = (Character)in.readObject();
        this.intColumn = in.readInt();
    }

}
