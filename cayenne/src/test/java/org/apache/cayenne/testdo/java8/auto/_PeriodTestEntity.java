package org.apache.cayenne.testdo.java8.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.Period;

import org.apache.cayenne.PersistentObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;
import org.apache.cayenne.testdo.java8.PeriodTestEntity;

/**
 * Class _PeriodTestEntity was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PeriodTestEntity extends PersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<PeriodTestEntity> SELF = PropertyFactory.createSelf(PeriodTestEntity.class);

    public static final NumericIdProperty<Integer> ID_PK_PROPERTY = PropertyFactory.createNumericId("ID", "PeriodTest", Integer.class);
    public static final String ID_PK_COLUMN = "ID";

    public static final BaseProperty<Period> PERIOD_FIELD = PropertyFactory.createBase("periodField", Period.class);

    protected Period periodField;


    public void setPeriodField(Period periodField) {
        beforePropertyWrite("periodField", this.periodField, periodField);
        this.periodField = periodField;
    }

    public Period getPeriodField() {
        beforePropertyRead("periodField");
        return this.periodField;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "periodField":
                return this.periodField;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "periodField":
                this.periodField = (Period)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.periodField);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.periodField = (Period)in.readObject();
    }

}
