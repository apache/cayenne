package org.apache.cayenne.testdo.quotemap.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.PersistentObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;
import org.apache.cayenne.exp.property.StringProperty;
import org.apache.cayenne.testdo.quotemap.QuoteAdress;
import org.apache.cayenne.testdo.quotemap.Quote_Person;

/**
 * Class _QuoteAdress was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _QuoteAdress extends PersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<QuoteAdress> SELF = PropertyFactory.createSelf(QuoteAdress.class);

    public static final NumericIdProperty<Integer> ADDRESS_ID_PK_PROPERTY = PropertyFactory.createNumericId("ADDRESS ID", "QuoteAdress", Integer.class);
    public static final String ADDRESS_ID_PK_COLUMN = "ADDRESS ID";

    public static final StringProperty<String> CITY = PropertyFactory.createString("city", String.class);
    public static final StringProperty<String> GROUP = PropertyFactory.createString("group", String.class);
    public static final EntityProperty<Quote_Person> PERSON_REL = PropertyFactory.createEntity("person_Rel", Quote_Person.class);

    protected String city;
    protected String group;

    protected Object person_Rel;

    public void setCity(String city) {
        beforePropertyWrite("city", this.city, city);
        this.city = city;
    }

    public String getCity() {
        beforePropertyRead("city");
        return this.city;
    }

    public void setGroup(String group) {
        beforePropertyWrite("group", this.group, group);
        this.group = group;
    }

    public String getGroup() {
        beforePropertyRead("group");
        return this.group;
    }

    public void setPerson_Rel(Quote_Person person_Rel) {
        setToOneTarget("person_Rel", person_Rel, true);
    }

    public Quote_Person getPerson_Rel() {
        return (Quote_Person)readProperty("person_Rel");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "city":
                return this.city;
            case "group":
                return this.group;
            case "person_Rel":
                return this.person_Rel;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "city":
                this.city = (String)val;
                break;
            case "group":
                this.group = (String)val;
                break;
            case "person_Rel":
                this.person_Rel = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.city);
        out.writeObject(this.group);
        out.writeObject(this.person_Rel);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.city = (String)in.readObject();
        this.group = (String)in.readObject();
        this.person_Rel = in.readObject();
    }

}
