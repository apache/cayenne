package org.apache.cayenne.testdo.return_types.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.GenericPersistentObject;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;
import org.apache.cayenne.exp.property.StringProperty;
import org.apache.cayenne.testdo.return_types.ReturnTypesMapLobs1;

/**
 * Class _ReturnTypesMapLobs1 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ReturnTypesMapLobs1 extends GenericPersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<ReturnTypesMapLobs1> SELF = PropertyFactory.createSelf(ReturnTypesMapLobs1.class);

    public static final NumericIdProperty<Integer> AAAID_PK_PROPERTY = PropertyFactory.createNumericId("AAAID", "ReturnTypesMapLobs1", Integer.class);
    public static final String AAAID_PK_COLUMN = "AAAID";

    public static final StringProperty<String> CLOB_COLUMN = PropertyFactory.createString("clobColumn", String.class);
    public static final StringProperty<String> NCLOB_COLUMN = PropertyFactory.createString("nclobColumn", String.class);

    protected String clobColumn;
    protected String nclobColumn;


    public void setClobColumn(String clobColumn) {
        beforePropertyWrite("clobColumn", this.clobColumn, clobColumn);
        this.clobColumn = clobColumn;
    }

    public String getClobColumn() {
        beforePropertyRead("clobColumn");
        return this.clobColumn;
    }

    public void setNclobColumn(String nclobColumn) {
        beforePropertyWrite("nclobColumn", this.nclobColumn, nclobColumn);
        this.nclobColumn = nclobColumn;
    }

    public String getNclobColumn() {
        beforePropertyRead("nclobColumn");
        return this.nclobColumn;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "clobColumn":
                return this.clobColumn;
            case "nclobColumn":
                return this.nclobColumn;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "clobColumn":
                this.clobColumn = (String)val;
                break;
            case "nclobColumn":
                this.nclobColumn = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.clobColumn);
        out.writeObject(this.nclobColumn);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.clobColumn = (String)in.readObject();
        this.nclobColumn = (String)in.readObject();
    }

}
