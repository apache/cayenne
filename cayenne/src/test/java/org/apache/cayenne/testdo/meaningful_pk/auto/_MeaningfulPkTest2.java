package org.apache.cayenne.testdo.meaningful_pk.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.PersistentObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;
import org.apache.cayenne.testdo.meaningful_pk.MeaningfulPkTest2;

/**
 * Class _MeaningfulPkTest2 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MeaningfulPkTest2 extends PersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<MeaningfulPkTest2> SELF = PropertyFactory.createSelf(MeaningfulPkTest2.class);

    public static final String PK_ATTRIBUTE_PK_COLUMN = "PK_ATTRIBUTE";

    public static final NumericProperty<Integer> INTEGER_ATTRIBUTE = PropertyFactory.createNumeric("integerAttribute", Integer.class);
    public static final NumericProperty<Integer> INTEGER_NULLABLE_ATTRIBUTE = PropertyFactory.createNumeric("integerNullableAttribute", Integer.class);
    public static final NumericProperty<Integer> PK_ATTRIBUTE = PropertyFactory.createNumeric("pkAttribute", Integer.class);

    protected Integer integerAttribute;
    protected Integer integerNullableAttribute;
    protected Integer pkAttribute;


    public void setIntegerAttribute(Integer integerAttribute) {
        beforePropertyWrite("integerAttribute", this.integerAttribute, integerAttribute);
        this.integerAttribute = integerAttribute;
    }

    public Integer getIntegerAttribute() {
        beforePropertyRead("integerAttribute");
        return this.integerAttribute;
    }

    public void setIntegerNullableAttribute(Integer integerNullableAttribute) {
        beforePropertyWrite("integerNullableAttribute", this.integerNullableAttribute, integerNullableAttribute);
        this.integerNullableAttribute = integerNullableAttribute;
    }

    public Integer getIntegerNullableAttribute() {
        beforePropertyRead("integerNullableAttribute");
        return this.integerNullableAttribute;
    }

    public void setPkAttribute(Integer pkAttribute) {
        beforePropertyWrite("pkAttribute", this.pkAttribute, pkAttribute);
        this.pkAttribute = pkAttribute;
    }

    public Integer getPkAttribute() {
        beforePropertyRead("pkAttribute");
        return this.pkAttribute;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "integerAttribute":
                return this.integerAttribute;
            case "integerNullableAttribute":
                return this.integerNullableAttribute;
            case "pkAttribute":
                return this.pkAttribute;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "integerAttribute":
                this.integerAttribute = (Integer)val;
                break;
            case "integerNullableAttribute":
                this.integerNullableAttribute = (Integer)val;
                break;
            case "pkAttribute":
                this.pkAttribute = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.integerAttribute);
        out.writeObject(this.integerNullableAttribute);
        out.writeObject(this.pkAttribute);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.integerAttribute = (Integer)in.readObject();
        this.integerNullableAttribute = (Integer)in.readObject();
        this.pkAttribute = (Integer)in.readObject();
    }

}
