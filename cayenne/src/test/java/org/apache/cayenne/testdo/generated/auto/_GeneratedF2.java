package org.apache.cayenne.testdo.generated.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.GenericPersistentObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;
import org.apache.cayenne.testdo.generated.GeneratedF1;
import org.apache.cayenne.testdo.generated.GeneratedF2;

/**
 * Class _GeneratedF2 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _GeneratedF2 extends GenericPersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<GeneratedF2> SELF = PropertyFactory.createSelf(GeneratedF2.class);

    public static final NumericIdProperty<Integer> ID_PK_PROPERTY = PropertyFactory.createNumericId("ID", "GeneratedF2", Integer.class);
    public static final String ID_PK_COLUMN = "ID";

    public static final ListProperty<GeneratedF1> F1 = PropertyFactory.createList("f1", GeneratedF1.class);


    protected Object f1;

    public void addToF1(GeneratedF1 obj) {
        addToManyTarget("f1", obj, true);
    }

    public void removeFromF1(GeneratedF1 obj) {
        removeToManyTarget("f1", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<GeneratedF1> getF1() {
        return (List<GeneratedF1>)readProperty("f1");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "f1":
                return this.f1;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "f1":
                this.f1 = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.f1);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.f1 = in.readObject();
    }

}
