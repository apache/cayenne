package org.apache.cayenne.testdo.array_type.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.PersistentObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;
import org.apache.cayenne.testdo.array_type.ArrayTestEntity;

/**
 * Class _ArrayTestEntity was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ArrayTestEntity extends PersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<ArrayTestEntity> SELF = PropertyFactory.createSelf(ArrayTestEntity.class);

    public static final NumericIdProperty<Integer> ID_PK_PROPERTY = PropertyFactory.createNumericId("ID", "ArrayTestEntity", Integer.class);
    public static final String ID_PK_COLUMN = "ID";

    public static final BaseProperty<Double[]> DOUBLE_ARRAY = PropertyFactory.createBase("doubleArray", Double[].class);

    protected Double[] doubleArray;


    public void setDoubleArray(Double[] doubleArray) {
        beforePropertyWrite("doubleArray", this.doubleArray, doubleArray);
        this.doubleArray = doubleArray;
    }

    public Double[] getDoubleArray() {
        beforePropertyRead("doubleArray");
        return this.doubleArray;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "doubleArray":
                return this.doubleArray;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "doubleArray":
                this.doubleArray = (Double[])val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.doubleArray);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.doubleArray = (Double[])in.readObject();
    }

}
