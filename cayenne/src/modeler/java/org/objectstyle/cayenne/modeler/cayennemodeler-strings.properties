cayenne.version = @CAYENNE_VERSION@
cayenne.build.date = @CAYENNE_BUILD_DATE@

cayenne.bugreport.url = http://objectstyle.org/cayenne/bugs-features.html

cayenne.modeler.about.info = (c) 2002-2004 Andrei (Andrus) Adamchik and individual authors.<br><br>\
			<a href='http://objectstyle.org/cayenne/'>http://objectstyle.org/cayenne/</a></font><br>


// "New Project" dialog.
cayenne.modeler.project.cancel.button = Close
cayenne.modeler.project.cancel.button.ShortDescription = Do not create project

cayenne.modeler.project.app.name = Cayenne Application Project
cayenne.modeler.project.app.button = Create Application
cayenne.modeler.project.app.button.ShortDescription = Create new application project
cayenne.modeler.project.app.desc = Cayenne application project should be used for standalone \
    applications. It consists of "cayenne.xml" file and a set of linked DataMaps and DataNodes. \
    There can be only one "cayenne.xml" in any Java application. If you are creating a Cayenne-\
    based shared library or framework, use Data Map project instead.
    
cayenne.modeler.project.map.name = Cayenne DataMap Project
cayenne.modeler.project.map.button = Create DataMap
cayenne.modeler.project.map.button.ShortDescription = Create new DataMap project
cayenne.modeler.project.map.desc = DataMap project is a single DataMap that describes database \
    mapping. It does not contain any database connection settings. DataMaps are normally \
    distributed as a part of Cayenne-based library. They can be imported into Cayenne Application \
    projects that provide needed connection information.


// "Generate Classes" Dialog 
cayenne.modeler.classgenerator.selectall.button = Select All
cayenne.modeler.classgenerator.selectall.button.ShortDescription = Select All Classes

cayenne.modeler.classgenerator.generate.button = Generate
cayenne.modeler.classgenerator.generate.button.ShortDescription = Generate Java Classes

cayenne.modeler.classgenerator.cancel.button = Cancel
cayenne.modeler.classgenerator.cancel.button.ShortDescription = Cancel Class Generation

cayenne.modeler.classgenerator.choose.button = Select
cayenne.modeler.classgenerator.choose.button.ShortDescription = Select Output Directory

cayenne.modeler.classgenerator.choosetemplate.button = Select
cayenne.modeler.classgenerator.choosetemplate.button.ShortDescription = Select Custom Template

cayenne.modeler.classgenerator.choosesupertemplate.button = Select
cayenne.modeler.classgenerator.choosesupertemplate.button.ShortDescription = Select Custom Superclass Template

// DbEntityValidation Dialog
cayenne.modeler.dbentityvalidation.generateopts.button = Continue
cayenne.modeler.dbentityvalidation.generateopts.button.ShortDescription = Continue With DB Schema Generation

cayenne.modeler.dbentityvalidation.cancel.button = Cancel
cayenne.modeler.dbentityvalidation.cancel.button.ShortDescription = Cancel DB Schema Generation

// CacheSyncConfig Dialog
cayenne.modeler.cacheSyncConfig.save.button = Done
cayenne.modeler.cacheSyncConfig.save.button.ShotDescription =Done
cayenne.modeler.cacheSyncConfig.cancel.button = Cancel
cayenne.modeler.cacheSyncConfig.cancel.button.ShortDescription = Cancel

cayenne.modeler.jgroupConfig.radio1 = Standard Configuration
cayenne.modeler.jgroupConfig.radio2 = Use Configuration File

// ConfigureClasspath Dialog
cayenne.modeler.configClasspath.save.button = Done
cayenne.modeler.configClasspath.save.button.ShotDescription = Done
cayenne.modeler.configClasspath.cancel.button = Cancel
cayenne.modeler.configClasspath.cancel.button.ShortDescription = Cancel

cayenne.modeler.configClasspath.addjar.button = Add Jar/Zip
cayenne.modeler.configClasspath.addjar.button.ShotDescription = Add Jar/Zip
cayenne.modeler.configClasspath.adddir.button = Add Class Folder
cayenne.modeler.configClasspath.adddir.button.ShotDescription = Add Class Folder
cayenne.modeler.configClasspath.remove.button = Remove
cayenne.modeler.configClasspath.remove.button.ShotDescription = Remove

// ObjRelationshipInfo Dialog
cayenne.modeler.mapObjRelationship.save.button = Done
cayenne.modeler.mapObjRelationship.save.button.ShotDescription = Done
cayenne.modeler.mapObjRelationship.cancel.button = Cancel
cayenne.modeler.mapObjRelationship.cancel.button.ShortDescription = Cancel

cayenne.modeler.mapObjRelationship.newtoone.button = New To-One DbRelationship
cayenne.modeler.mapObjRelationship.newtoone.button.ShortDescription = New To-One DbRelationship

cayenne.modeler.mapObjRelationship.newtomany.button = New To-Many DbRelationship
cayenne.modeler.mapObjRelationship.newtomany.button.ShortDescription = New To-Many DbRelationship

// QueryType Dialog
cayenne.modeler.queryType.create.button = Create
cayenne.modeler.queryType.create.button.ShotDescription = Create

cayenne.modeler.queryType.cancel.button = Cancel
cayenne.modeler.queryType.cancel.button.ShortDescription = Cancel

cayenne.modeler.queryType.selectQuery.radio = Object Select Query
cayenne.modeler.queryType.selectQuery.radio.ShortDescription = Object Select Query

cayenne.modeler.queryType.sqlQuery.radio = Raw SQL
cayenne.modeler.queryType.sqlQuery.radio.ShortDescription = Raw SQL

cayenne.modeler.queryType.procedureQuery.radio = Stored Procedure Query
cayenne.modeler.queryType.procedureQuery.radio.ShortDescription = Stored Procedure Query

// DataMap DefaultsPreferences Dialog
cayenne.modeler.datamap.defaultprefs.update.button = Update
cayenne.modeler.datamap.defaultprefs.update.button.ShotDescription = Update

cayenne.modeler.datamap.defaultprefs.cancel.button = Cancel
cayenne.modeler.datamap.defaultprefs.cancel.button.ShortDescription = Cancel

cayenne.modeler.datamap.defaultprefs.schema.radio = Set/update schema for all DbEntities
cayenne.modeler.datamap.defaultprefs.schemanull.radio = Do not override existing non-empty schema

cayenne.modeler.datamap.defaultprefs.package.radio = Set/update package for all ObjEntities (create default class names if missing)
cayenne.modeler.datamap.defaultprefs.packagenull.radio = Do not override existing non-empty class names

cayenne.modeler.datamap.defaultprefs.superclass.radio = Set/update superclass for all ObjEntities
cayenne.modeler.datamap.defaultprefs.superclassnull.radio = Do not override existing non-empty superclasses

cayenne.modeler.datamap.defaultprefs.locktype.radio = Set/update lock type for all ObjEntities
cayenne.modeler.datamap.defaultprefs.locktypenull.radio = Do not override optimistic locking settings

