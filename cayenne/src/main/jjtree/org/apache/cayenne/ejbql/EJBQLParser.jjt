/*****************************************************************
 *   Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 ****************************************************************/

/**
 * Cayenne EJB QL grammar parser.
 *	
 * <p/><i>Based on OpenJPA JPQL grammer by Patrick Linskey and Marc Prud'hommeaux</i>
 */
options {
	NODE_PREFIX = "EJBQL";
	NODE_PACKAGE = "org.apache.cayenne.ejbql.parser";
	MULTI = true;
	NODE_DEFAULT_VOID = true;
	JAVA_UNICODE_ESCAPE = true;
	STATIC = false;
	NODE_USES_PARSER = false;

	LOOKAHEAD = 1;

	// debugging variables
	// DEBUG_PARSER = true; 		// simple parser debug
	// DEBUG_TOKEN_MANAGER = true; 	// more verbose token manager debug
	// DEBUG_LOOKAHEAD = true; 		// more verbose lookahead debug

	SANITY_CHECK = true; // check for left-recursion, etc (must always be true)

	// FORCE_LA_CHECK = true;
}

PARSER_BEGIN(EJBQL)
package org.apache.cayenne.ejbql.parser;

import java.io.*;
import java.util.*;
import org.apache.cayenne.ejbql.*;
import org.apache.cayenne.map.*;

public class EJBQL {

	public EJBQL (String source) {
		this (new StringReader (source));
		// ensure that error location matches java char count, including the tabs
		jj_input_stream.setTabSize(1);
	}
	
    public static class EJBQLDefaultParser implements EJBQLParser {

       public EJBQLExpression parse(String ejbqlStatement) throws EJBQLException {
           try {
              return new EJBQL(ejbqlStatement).parseQuery();
           }
           catch(ParseException e) {
              throw new EJBQLException("Error parsing EJB QL statement", e);
           }
       }
       
       public EJBQLCompiledExpression compile(String ejbqlStatement, EntityResolver resolver) throws EJBQLException {
           try {
              return new Compiler(resolver).compile(ejbqlStatement, new EJBQL(ejbqlStatement).parseQuery());
           }
           catch(ParseException e) {
              throw new EJBQLException("Error parsing EJB QL statement", e);
           }
       }
    }
}
PARSER_END(EJBQL)


SKIP :
{
 	" "
	| "\r"
	| "\t"
	| "\n"
}


TOKEN [ IGNORE_CASE ]: /* basics */
{
	< COMMA: "," >

	|	< DOT: "." >

	|	< EQ: "=" >
	|	< NE: "<>" >
	|	< GT: ">" >
	|	< GE: ">=" >
	|	< LT: "<" >
	|	< LE: "<=" >

	|	< PLUS: "+" >
	|	< MINUS: "-" >

	|	< TIMES: "*" >
	|	< DIV: "/" >

	|	< NEW: "NEW" >

	|	< ALL: "ALL" >
	|	< ANY: "ANY" >
	|	< EXISTS: "EXISTS" >
	|	< SOME: "SOME" >
	|	< EMPTY: "EMPTY" >

	|	< ASC: "ASC" >
	|	< DESC: "DESC" >
	|	< ORDER: "ORDER" >
	|	< BY: "BY" >

	|	< IS: "IS" >
	|	< MEMBER: "MEMBER" >
	|	< OF: "OF" >
	|	< LIKE: "LIKE" >
	|	< ESCAPE: "ESCAPE" >
	|	< BETWEEN: "BETWEEN" >

	|	< NULL: "NULL" >
}

TOKEN [ IGNORE_CASE ]: /* aggregates */
{
	< AVG: "AVG" >
	|	< MIN: "MIN" >
	|	< MAX: "MAX" >
	|	< SUM: "SUM" >
	|	< COUNT: "COUNT" >
}

TOKEN [ IGNORE_CASE ]: /* boolean arithmetic */
{
	< OR: "OR" >
	|	< AND: "AND" >
	|	< NOT: "NOT" >
}

TOKEN [ IGNORE_CASE ]: /* functions returning strings */
{
	< CONCAT: "CONCAT" >
	|	< SUBSTRING: "SUBSTRING" >
	|	< TRIM: "TRIM" >
	|	< LOWER: "LOWER" >
	|	< UPPER: "UPPER" >
}

TOKEN [ IGNORE_CASE ]: /* trim specification */
{
	< LEADING: "LEADING" >
	|	< TRAILING: "TRAILING" >
	|	< BOTH: "BOTH" >
}


TOKEN [ IGNORE_CASE ]: /* functions returning numerics */
{
	< LENGTH: "LENGTH" >
	|	< LOCATE: "LOCATE" >
	|	< ABS: "ABS" >
	|	< SQRT: "SQRT" >
	|	< MOD: "MOD" >
	|	< SIZE: "SIZE" >
}


TOKEN [ IGNORE_CASE ]: /* functions returning datetime */
{
	< CURRENT_DATE: "CURRENT_DATE" >
	|	< CURRENT_TIME: "CURRENT_TIME" >
	|	< CURRENT_TIMESTAMP: "CURRENT_TIMESTAMP" >
}

TOKEN [ IGNORE_CASE ]: /* type of query */
{
	< SELECT: "SELECT" >
	|	< DISTINCT: "DISTINCT" >
	|	< FROM: "FROM" >

	|	< UPDATE: "UPDATE" >
	|	< DELETE: "DELETE" >

	|	< WHERE: "WHERE" >
	|	< GROUP: "GROUP" >
	|	< HAVING: "HAVING" >

	|	< AS: "AS" >
	|	< LEFT: "LEFT" >
	|	< OUTER: "OUTER" >
	|	< INNER: "INNER" >
	|	< JOIN: "JOIN" >
	|	< FETCH: "FETCH" >
	|	< IN: "IN" >
	|	< SET: "SET" >

	|	< OBJECT: "OBJECT" >
}


/* inspired by the Java 1.0.2 specification */
/* ### should we limit this to the length that is valid in java? */
TOKEN : /* literals */
{
	< INTEGER_LITERAL: ((["0"-"9"])+) (["l","L"])? >
	| < DECIMAL_LITERAL:
		(((["0"-"9"])* "." (["0"-"9"])+) (<EXPONENT>)? (["f","F","d","D"])?
		| ((["0"-"9"])+ ".") (<EXPONENT>)? (["f","F","d","D"])?
		| ((["0"-"9"])+) (<EXPONENT>) (["f","F","d","D"])?
		| ((["0"-"9"])+) (<EXPONENT>)? (["f","F","d","D"])?) >
	| < BOOLEAN_LITERAL: "TRUE" | "FALSE" | "true" | "false" >
	| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	| < STRING_LITERAL: "'"
	  (("''" | ~["'"])
		/*
	  (("''" | ~["'","\\","\n","\r"])
		| ("\\"
			( ["n","t","b","r","f","\\","'"]
			| ["0"-"7"] ( ["0"-"7"] )?
			| ["0"-"3"] ["0"-"7"] ["0"-"7"]
			)
		  )
		*/
	  )*
	  "'"
	>
	| < CHARACTER_LITERAL: "'"
	  (   (~["'","\\","\n","\r"])
		| ("\\"
			( ["n","t","b","r","f","\\","'"]
			| ["0"-"7"] ( ["0"-"7"] )?
			| ["0"-"3"] ["0"-"7"] ["0"-"7"]
			)
		  )
	  )
	  "'"
	>
}

/* From the Java 1.0.2 specification */
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* (["+"])? >
	|
  < #LETTER:
	  [
	   "\u0024", 			// $
	   "\u0041"-"\u005a", 	// A-Z
	   "\u005f", 			// _
	   "\u0061"-"\u007a", 	// a-z
	   "\u00c0"-"\u00d6",
	   "\u00d8"-"\u00f6",
	   "\u00f8"-"\u00ff",
	   "\u0100"-"\u1fff",
	   "\u3040"-"\u318f",
	   "\u3300"-"\u337f",
	   "\u3400"-"\u3d2d",
	   "\u4e00"-"\u9fff",
	   "\uf900"-"\ufaff"
	  ]
  >
	|
  < #DIGIT:
	  [
	   "\u0030"-"\u0039", 	// 0-9
	   "\u0660"-"\u0669",
	   "\u06f0"-"\u06f9",
	   "\u0966"-"\u096f",
	   "\u09e6"-"\u09ef",
	   "\u0a66"-"\u0a6f",
	   "\u0ae6"-"\u0aef",
	   "\u0b66"-"\u0b6f",
	   "\u0be7"-"\u0bef",
	   "\u0c66"-"\u0c6f",
	   "\u0ce6"-"\u0cef",
	   "\u0d66"-"\u0d6f",
	   "\u0e50"-"\u0e59",
	   "\u0ed0"-"\u0ed9",
	   "\u1040"-"\u1049"
	  ]
  >
}


Node parseQuery() : { }
{
	(select_statement() | update_statement() | delete_statement()) <EOF>
	{
		return jjtree.rootNode();
	}
}


void select_statement() #Select : { }
{
	select_clause()
		from_clause()
		[where_clause()]
		[groupby_clause()]
		[having_clause()]
		[orderby_clause()]
}


void update_statement() #Update : { }
{
	update_clause() [ where_clause() ]
}


void delete_statement() #Delete : { }
{
	<DELETE> <FROM> (from_item() #From) [where_clause()]
}


void from_clause() #From : { }
{
	<FROM> identification_variable_declaration()
	(LOOKAHEAD(1) <COMMA> (LOOKAHEAD(collection_member_declaration()) collection_member_declaration() | LOOKAHEAD(identification_variable_declaration())identification_variable_declaration()))*
}


void identification_variable_declaration(): { }
{
	from_item() (LOOKAHEAD(fetch_join()) fetch_join() | LOOKAHEAD(inner_join()) inner_join() | LOOKAHEAD(outer_join()) outer_join())*
}


void from_item() #FromItem : { }
{
	abstract_schema_name() [LOOKAHEAD(1)<AS>] [LOOKAHEAD(identification_variable())identification_variable()]
}


void subquery_from_clause() #From : { }
{
	<FROM> subquery_from_item()
		( LOOKAHEAD(1) <COMMA> subquery_from_item() )*
}

void subquery_from_item() : { }
{
        LOOKAHEAD(collection_member_declaration()) collection_member_declaration()
	| LOOKAHEAD(identification_variable_declaration()) identification_variable_declaration()
}

void inner_join() #InnerJoin : { }
{
	[<INNER>] <JOIN> path() [<AS>] identification_variable()
}


void collection_member_declaration() #InnerJoin : { }
{
	// synonymous with "INNER JOIN path AS identifier" (InnerJoin)
	<IN> "(" path() ")" [ LOOKAHEAD(1)<AS>] identification_variable()
}

void outer_join() #OuterJoin : { }
{
	<LEFT> [ <OUTER>] <JOIN> path() [ LOOKAHEAD(1)<AS>] identification_variable()
}


void fetch_join() : { }
{
	outer_fetch_join() | inner_fetch_join()
}


void outer_fetch_join() #OuterFetchJoin : { }
{
	<LEFT> [<OUTER>] <JOIN> <FETCH> path()
}


void inner_fetch_join() #InnerFetchJoin : { }
{
	[<INNER>] <JOIN> <FETCH> path()
}


void path() : { }
{
	// a path is any dot-separated path expression starting with a
	// non-reserved word
	
	db_path() | object_path()
}

void db_path() #DbPath : { }
{
	// Cayenne extension: DBPath... there's no such thing in EJBQL 
	
	"db:" identification_variable() (<DOT> path_component())+
}

void object_path() #Path : { }
{
	identification_variable() (<DOT> path_component())+
}


void update_clause() : { }
{
	<UPDATE> from_item() #From set_clause()
}


void set_clause() : { }
{
	<SET> update_item() (<COMMA> update_item())*
}


void update_item() #UpdateItem : { }
{
	update_field() EQ() new_value()
}


void update_field() #UpdateField : { }
{
	// identification_variable() (<DOT> path_component())+
	[LOOKAHEAD(1) identification_variable() <DOT>] path_component()
}


void new_value() #UpdateValue : { }
{
	LOOKAHEAD(arithmetic_expression()) arithmetic_expression() |
	LOOKAHEAD(string_primary()) string_primary() |
	LOOKAHEAD(datetime_primary()) datetime_primary() |
	LOOKAHEAD(boolean_primary()) boolean_primary() |
	LOOKAHEAD(enum_primary()) enum_primary() |
	LOOKAHEAD(simple_entity_expression()) simple_entity_expression() |
	<NULL>
}


void simple_entity_expression() : { }
{
	identification_variable() | input_parameter()
}


void select_clause() #SelectClause : { }
{
	<SELECT> [distinct()] select_expressions()
}


void simple_select_clause() #SelectClause : { }
{
	<SELECT> [distinct()] subselect_expressions() 
}


void select_expressions() #SelectExpressions : { }
{
	select_expression() (<COMMA> select_expression())*
}


void select_expression() #SelectExpression : { }
{
	aggregate_select_expression()
		| LOOKAHEAD(path()) path()
		| identification_variable()
		| (<OBJECT> "(" identification_variable() ")")
		| constructor_expression()
}


void subselect_expressions() #SelectExpressions : { }
{
	subselect_expression() (<COMMA> subselect_expression())*
}

void subselect_expression() #SelectExpression : { }
{
	LOOKAHEAD(path()) path() 
		| aggregate_select_expression()
		| LOOKAHEAD(1) identification_variable()
}


void constructor_expression() #Constructor : { }
{
	<NEW> classname() constructor_parameters()
}


void classname() #ClassName :
{ Token t; }
{
	identification_variable() (<DOT> identification_variable())*
}


void constructor_parameters() #ConstructorParameters : { }
{
	"(" (constructor_parameter()) (<COMMA> (constructor_parameter()))* ")" 
}


void constructor_parameter() #ConstructorParameter : { }
{
	(path() | aggregate_select_expression())
}


/* rewritten to reduce lookaheads */
void aggregate_select_expression() #Aggregate : { }
{
	(avg() | max() | min() | sum() | count())
}


void distinct() #Distinct : { }
{
	<DISTINCT>
}


void aggregate_path() : { }
{
	"(" (
		LOOKAHEAD(arithmetic_expression()) arithmetic_expression() |
		LOOKAHEAD(distinct_path()) distinct_path() |
		LOOKAHEAD(path()) path() |
		LOOKAHEAD(identification_variable()) identification_variable()
	) ")"
}


void distinct_path() #Distinct : { }
{
	<DISTINCT> (LOOKAHEAD(path()) path() | identification_variable())
}


void count() #Count : { }
{
	<COUNT> aggregate_path()
}


void avg() #Average : { }
{
	<AVG> aggregate_path()
}


void max() #Max : { }
{
	<MAX> aggregate_path()
}


void min() #Min : { }
{
	<MIN> aggregate_path()
}


void sum() #Sum : { }
{
	<SUM> aggregate_path()
}


void where_clause() #Where : { }
{
	<WHERE> conditional_expression() 
}


void groupby_clause() #GroupBy : { }
{
	<GROUP> <BY> groupby_item()
		(LOOKAHEAD(2) <COMMA> (groupby_item()))* 
}


void groupby_item() : { }
{
	LOOKAHEAD(path()) path() | identification_variable()
}


void having_clause() #Having : { }
{
	<HAVING> conditional_expression() 
}


void subquery() #Subselect : { }
{
	simple_select_clause()
		subquery_from_clause() 
		[LOOKAHEAD(where_clause()) where_clause()] 
		[LOOKAHEAD(groupby_clause()) groupby_clause()] 
		[LOOKAHEAD(having_clause()) having_clause()] 
}


/* changed to eliminate left recursion */
void conditional_expression() : { }
{
	conditional_term() (LOOKAHEAD(2) <OR> (conditional_expression() #Or(2)))*
}


/* changed to eliminate left recursion */
void conditional_term() : { }
{
	conditional_factor() (LOOKAHEAD(2) <AND> (conditional_term() #And(2)))*
}


void conditional_factor() : { }
{
	LOOKAHEAD(<NOT> conditional_primary())
	(<NOT> conditional_primary() #Not) | conditional_primary()
}


void conditional_primary() : { }
{
	LOOKAHEAD(simple_cond_expression())
	simple_cond_expression() | "(" conditional_expression() ")" 
}


void simple_cond_expression() : { }
{
	//LOOKAHEAD(all_or_any_expression()) all_or_any_expression() |
	LOOKAHEAD(exists_expression()) exists_expression() |
	LOOKAHEAD(comparison_expression()) comparison_expression() | 
	LOOKAHEAD(between_expression()) between_expression() | 
	LOOKAHEAD(like_expression()) like_expression() | 
	LOOKAHEAD(in_expression()) in_expression() | 
	LOOKAHEAD(null_comparison_expression()) null_comparison_expression() | 
	LOOKAHEAD(empty_collection_comparison_expression()) empty_collection_comparison_expression() | 
	LOOKAHEAD(collection_member_expression()) collection_member_expression()
}


void between_expression() #Between : { }
{
	LOOKAHEAD(6) arithmetic_expression()
		[<NOT> { jjtThis.not = true; }] <BETWEEN> arithmetic_expression()
		<AND> arithmetic_expression()
	| LOOKAHEAD(6) string_expression()
		[<NOT> { jjtThis.not = true; }] <BETWEEN> string_expression() <AND> string_expression()
	| LOOKAHEAD(6) datetime_expression()
		[<NOT> { jjtThis.not = true; }] <BETWEEN> datetime_expression() <AND> datetime_expression()
}


void in_expression() #In : { }
{
	path() [ LOOKAHEAD(1) <NOT> { jjtThis.not = true; }] <IN>
		("(" (literal_or_param()
			(<COMMA> (literal_or_param()))* | subquery())
		")"|input_parameter())
}


void literal_or_param() : { }
{
	(numeric_literal()
	| string_literal()
	| boolean_literal()
	| input_parameter())
}


void like_expression() #Like : { }
{
	string_expression() [<NOT> { jjtThis.not = true; }] <LIKE> 
	((input_parameter() [(<ESCAPE> escape_character())]) | pattern_value())  
}


void null_comparison_expression() #IsNull : { }
{
	(input_parameter() | path())
	<IS> [<NOT> { jjtThis.not = true; }] <NULL> 
}


void empty_collection_comparison_expression() #IsEmpty : { }
{
	path() <IS> [<NOT> { jjtThis.not = true; }] <EMPTY> 
}


void collection_member_expression() #MemberOf : { }
{
	(LOOKAHEAD(path()) path() | input_parameter() | path_component()) 
	[<NOT> { jjtThis.not = true; }] <MEMBER> [<OF>] path()
}


void exists_expression() #Exists : { }
{
	[<NOT> { jjtThis.not = true; }] <EXISTS> "(" subquery() ")" 
}


void all_or_any_expression() : { }
{
	any_expression() | some_expression() | all_expression()
}


void any_expression() #Any : { }
{
	<ANY> "(" subquery() ")" 
}


void some_expression() #Any : { }
{
	// SOME and ANY are synonymous
	<SOME> "(" subquery() ")" 
}


void all_expression() #All : { }
{
	<ALL> "(" subquery() ")" 
}


void comparison_expression() : { }
{
	// comparison_expression ::= string_value comparison_operator {string_expression | all_or_any_expression} | boolean_value { =|<>} {boolean_expression | all_or_any_expression} | datetime_primary comparison_operator {datetime_expression | all_or_any_expression} | entity_bean_value { = | <> } {entity_bean_expression | all_or_any_expression} | arithmetic_value comparison_operator {arithmetic_expression | all_or_any_expression

	LOOKAHEAD(arithmetic_comp()) arithmetic_comp() |
	LOOKAHEAD(string_comp()) string_comp() |
	LOOKAHEAD(boolean_comp()) boolean_comp() | 
	LOOKAHEAD(enum_comp()) enum_comp() | 
	LOOKAHEAD(datetime_comp()) datetime_comp() |
	LOOKAHEAD(entity_comp()) entity_comp()
}


void string_comp() : { }
{
	string_expression() (
		(<EQ> (string_expression()|all_or_any_expression()) #Equals(2))
		| (<NE> (string_expression()|all_or_any_expression()) #NotEquals(2))
		| (<GT> (string_expression() | all_or_any_expression()) #GreaterThan(2))
		| (<GE> (string_expression() | all_or_any_expression()) #GreaterOrEqual(2))
		| (<LT> (string_expression() | all_or_any_expression()) #LessThan(2))
		| (<LE> (string_expression() | all_or_any_expression()) #LessOrEqual(2))
		)
}


void boolean_comp() : { }
{
	boolean_expression() (
	(<EQ> (boolean_expression() | all_or_any_expression()) #Equals(2))
	| (<NE> (boolean_expression() | all_or_any_expression()) #NotEquals(2))
	)
}

void enum_comp() : { }
{
	enum_expression() (
	(<EQ> (enum_expression() | all_or_any_expression()) #Equals(2))
	| (<NE> (enum_expression() | all_or_any_expression()) #NotEquals(2))
	)
}

void entity_comp() : { }
{
	entity_bean_expression() (
	(<EQ> ((LOOKAHEAD(all_or_any_expression()) all_or_any_expression() | entity_bean_expression()) #Equals(2)))
	| (<NE> ((LOOKAHEAD(all_or_any_expression()) all_or_any_expression() | entity_bean_expression()) #NotEquals(2)))
	)
}


void arithmetic_comp() : { }
{
	// arithmetic_value() (
	arithmetic_expression() (
	(<EQ> (arithmetic_expression() | all_or_any_expression()) #Equals(2))
	| (<GT> (arithmetic_expression() | all_or_any_expression()) #GreaterThan(2))
	| (<GE> (arithmetic_expression() | all_or_any_expression()) #GreaterOrEqual(2))
	| (<LT> (arithmetic_expression() | all_or_any_expression()) #LessThan(2))
	| (<LE> (arithmetic_expression() | all_or_any_expression()) #LessOrEqual(2))
	| (<NE> (arithmetic_expression() | all_or_any_expression()) #NotEquals(2))
	)
}


void datetime_comp() : { }
{
	datetime_expression() (
	(<EQ> (datetime_expression() | all_or_any_expression()) #Equals(2))
	| (<GT> (datetime_expression() | all_or_any_expression()) #GreaterThan(2))
	| (<GE> (datetime_expression() | all_or_any_expression()) #GreaterOrEqual(2))
	| (<LT> (datetime_expression() | all_or_any_expression()) #LessThan(2))
	| (<LE> (datetime_expression() | all_or_any_expression()) #LessOrEqual(2))
	| (<NE> (datetime_expression() | all_or_any_expression()) #NotEquals(2))
	)
}


void arithmetic_value() : { }
{
	path() | functions_returning_numerics() | "(" subquery() ")"
}


/* changed to eliminate left recursion */
void arithmetic_expression() : { }
{
	arithmetic_term()
		((<PLUS> arithmetic_expression() #Add(2))
		| (<MINUS> arithmetic_expression() #Subtract(2)))*
}


/* changed to eliminate left recursion */
void arithmetic_term() : { }
{
	arithmetic_factor()
		((<TIMES> arithmetic_term() #Multiply(2))
		| (<DIV> arithmetic_term() #Divide(2)))*
}


void arithmetic_factor() : { }
{
	numeric_literal() | 
	input_parameter() | 
	path() |
	LOOKAHEAD(2) "(" arithmetic_expression() ")" | 
	functions_returning_numerics() | 
	aggregate_select_expression() |	
	subquery()
}


void negative() #Negative : { }
{
	<MINUS>
}


void string_value() : { }
{
	path() | functions_returning_strings() | "(" subquery() ")"
}


void string_expression() : { }
{
	input_parameter() | string_primary()
}


void string_primary() : { }
{
	string_literal() | path() | LOOKAHEAD(2) "(" string_expression() ")" | 
	functions_returning_strings() | LOOKAHEAD(2)  "(" subquery() ")"
}


void datetime_expression() : { }
{
	datetime_primary() | "(" subquery() ")"
}


void datetime_primary() : { }
{
	path() | functions_returning_datetime() | input_parameter()
}


void boolean_value() : { }
{
	path() | "(" subquery() ")"
}


void boolean_expression() : { }
{
	boolean_primary() | "(" subquery() ")"
}


void boolean_primary() : { }
{
	LOOKAHEAD(2) path() | boolean_literal() | input_parameter()
}


void enum_expression() : { }
{
	enum_primary() | "(" subquery() ")"
}


void enum_primary() : { }
{
	LOOKAHEAD(2) path()
	| LOOKAHEAD(enum_literal()) enum_literal()
	| LOOKAHEAD(input_parameter()) input_parameter()
}


void enum_literal() : { }
{
	"enum:" path()
}


void entity_bean_value() : { }
{
	LOOKAHEAD(path()) path() | path_component()
}


void entity_bean_expression() : { }
{
	input_parameter() | entity_bean_value()
}


void functions_returning_strings() : { }
{
	concat() | substring() | trim() | lower() | upper()
}


void concat() #Concat : { }
{
	<CONCAT> "(" string_expression() <COMMA> string_expression() ")"
}


void substring() #Substring : { }
{
	<SUBSTRING> "(" string_expression() <COMMA> arithmetic_expression() <COMMA> arithmetic_expression() ")"
}


void trim() #Trim : { }
{
	<TRIM> "(" [LOOKAHEAD(2)[trim_specification()] [trim_character()] <FROM>]
		string_expression() ")"
}


void lower() #Lower : { }
{
	<LOWER> "(" string_expression() ")"
}


void upper() #Upper : { }
{
	<UPPER> "(" string_expression() ")"
}



void trim_specification() : { }
{
	LOOKAHEAD(2) (<LEADING> #TrimLeading) | (<TRAILING> #TrimTrailing) | (<BOTH> #TrimBoth)
}


void functions_returning_numerics() : { }
{
	length() | locate() | abs() | sqrt() | mod() | size()
}


void length() #Length : { }
{
	<LENGTH> "(" string_expression() ")"

}


void locate() #Locate : { }
{
	<LOCATE> "(" string_expression() <COMMA> string_expression()
		[<COMMA> arithmetic_expression()] ")"

}


void abs() #Abs : { }
{
	<ABS> "(" arithmetic_expression() ")"

}


void sqrt() #Sqrt : { }
{
	<SQRT> "(" arithmetic_expression() ")"

}


void mod() #Mod : { }
{
	<MOD> "(" arithmetic_expression() <COMMA> arithmetic_expression() ")"

}


void size() #Size : { }
{
	<SIZE> "(" path() ")"
}


void functions_returning_datetime() : { }
{
	(<CURRENT_DATE> #CurrentDate)
	| (<CURRENT_TIME> #CurrentTime)
	| (<CURRENT_TIMESTAMP> #CurrentTimestamp)
}


void orderby_clause() #OrderBy : { }
{
	<ORDER> <BY> orderby_item() (<COMMA> orderby_item())* 
}


void orderby_item() #OrderByItem : { }
{
	(aggregate_select_expression() 
	| path()
	)
	[ <ASC> #Ascending | <DESC> #Descending ]
}


void abstract_schema_name() #AbstractSchemaName : { }
{
	path_component() (<DOT> path_component())*
}


void tok() #Tok :
{ Token t; }
{
	t = <IDENTIFIER> { jjtThis.setText (t.image); }
}


void identification_variable() #Identifier :
{ Token t; }
{  
	t = <IDENTIFIER> { jjtThis.setText (t.image); }
}


void path_component() #IdentificationVariable :
{ Token t; }
{
	// unlike the identifier(), the path_component() *can* be a
	// reserved word. E.g., Order.group.length is a perfectly
	// valid path expression
	(
	t = <NEW>
	| t = <ALL>
	| t = <ANY>
	| t = <EXISTS>
	| t = <SOME>
	| t = <EMPTY>
	| t = <ASC>
	| t = <DESC>
	| t = <ORDER>
	| t = <IS>
	| t = <MEMBER>
	| t = <OF>
	| t = <LIKE>
	| t = <ESCAPE>
	| t = <BETWEEN>
	| t = <NULL>
	| t = <AVG>
	| t = <MIN>
	| t = <MAX>
	| t = <SUM>
	| t = <COUNT>
	| t = <OR>
	| t = <AND>
	| t = <NOT>
	| t = <CONCAT>
	| t = <SUBSTRING>
	| t = <TRIM>
	| t = <LOWER>
	| t = <UPPER>
	| t = <LEADING>
	| t = <TRAILING>
	| t = <BOTH>
	| t = <LENGTH>
	| t = <LOCATE>
	| t = <ABS>
	| t = <SQRT>
	| t = <MOD>
	| t = <SIZE>
	| t = <CURRENT_DATE>
	| t = <CURRENT_TIME>
	| t = <CURRENT_TIMESTAMP>
	| t = <SELECT>
	| t = <DISTINCT>
	| t = <FROM>
	| t = <UPDATE>
	| t = <DELETE>
	| t = <WHERE>
	| t = <GROUP>
	| t = <BY>
	| t = <HAVING>
	| t = <AS>
	| t = <LEFT>
	| t = <OUTER>
	| t = <INNER>
	| t = <JOIN>
	| t = <FETCH>
	| t = <IN>
	| t = <SET>
	| t = <OBJECT>
	| t = <IDENTIFIER>
    ) { jjtThis.setText (t.image); }
}


void numeric_literal() : { }
{
	LOOKAHEAD(decimal_literal()) decimal_literal() | integer_literal()
}


void integer_literal() #IntegerLiteral :
{ Token t; }
{
	[<PLUS> | negative()] t = <INTEGER_LITERAL> { jjtThis.setText (t.image); }
}


void decimal_literal() #DecimalLiteral :
{ Token t; }
{
	 [<PLUS> | negative()] t = <DECIMAL_LITERAL> { jjtThis.setText (t.image); }
}


void boolean_literal() #BooleanLiteral :
{ Token t; }
{
	t = <BOOLEAN_LITERAL> { jjtThis.setText (t.image); }
}


void string_literal() #StringLiteral :
{ Token t; }
{
	t = <STRING_LITERAL> { jjtThis.setText (t.image); }
}


void input_parameter() : { }
{
	named_input_parameter() | positional_input_parameter()
}


void named_input_parameter() #NamedInputParameter :
{ Token t; }
{
	":" t = <IDENTIFIER> { jjtThis.setText (t.image); }
}


void positional_input_parameter() #PositionalInputParameter :
{ Token t; }
{
	"?" t = <INTEGER_LITERAL> { jjtThis.setText (t.image); }
}


void pattern_value() #PatternValue : { }
{
	string_literal() [(<ESCAPE> escape_character())]
}


void escape_character() #EscapeCharacter :
{ Token t; }
{
	t = <STRING_LITERAL> { jjtThis.setText (t.image); }
}


void trim_character() #TrimCharacter :
{ Token t; }
{
	t = <STRING_LITERAL> { jjtThis.setText (t.image); }
}


void EQ() #Equals : { }
{
	<EQ>
}


void NE() #NotEquals : { }
{
	<NE>
}


void GT() #GreaterThan : { }
{
	<GT>
}


void GE() #GreaterOrEqual : { }
{
	<GE>
}


void LT() #LessThan : { }
{
	<LT>
}


void LE() #LessOrEqual : { }
{
	<LE>
}
