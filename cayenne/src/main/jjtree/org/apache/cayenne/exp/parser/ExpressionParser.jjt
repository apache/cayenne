options {
	
	MULTI = true;
	NODE_DEFAULT_VOID = true;
	
	STATIC = false;
	DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
	DEBUG_TOKEN_MANAGER = false;
	JAVA_UNICODE_ESCAPE = true;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(ExpressionParser)
/*****************************************************************
 *   Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 ****************************************************************/


package org.apache.cayenne.exp.parser;

import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.cayenne.exp.Expression;

/**
  * Parser of Cayenne Expressions. 
  *
  * @since 1.1
  */ 
public class ExpressionParser {
}

PARSER_END(ExpressionParser)


Expression expression() : {}
{
	orCondition() <EOF> 
    { 
        return (Expression) jjtree.rootNode(); 
    }
}

void orCondition() : {}
{
	andCondition() ( "or" andCondition() #Or(2) )*
}

void andCondition() : {}
{
	notCondition() ( "and" notCondition() #And(2) )*
}

void notCondition() : {}
{
		( "not" | "!" ) simpleCondition() #Not(1)
	|
		simpleCondition()
}

void simpleCondition() : {} 
{
	  <TRUE> #True
	|
	  <FALSE> #False
	|
	  conditionExpression()
	(
          ("="  | "==") scalarExpression() #Equal(2)
        |
          ("!=" | "<>")  scalarExpression() #NotEqual(2)
        |
          "<=" scalarExpression() #LessOrEqual(2)
        |
          "<" scalarExpression() #Less(2)
        |
          ">"  scalarExpression() #Greater(2)
        |
          ">=" scalarExpression() #GreaterOrEqual(2)
        |
          "like" scalarExpression() #Like(2)
        |
          "likeIgnoreCase"  scalarExpression() #LikeIgnoreCase(2)
        |
          "in" ( namedParameter() | "(" scalarCommaList() ")" ) #In(2)
        |
          "between"  scalarExpression() "and" scalarExpression() #Between(3)
        |
          simpleNotCondition()
	)?
}

void simpleNotCondition() : {} 
{
	("not" | "!" )
	(
		"like" scalarExpression() #NotLike(2)
	|
	    "likeIgnoreCase"  scalarExpression() #NotLikeIgnoreCase(2)
	|
		"in" (  namedParameter() |  "(" scalarCommaList() ")" ) #NotIn(2)
	|
		"between"  scalarExpression() "and" scalarExpression() #NotBetween(3)
	)
}

void scalarCommaList() : {}
{
	( scalarConstExpression() ( ","  scalarConstExpression() )* ) #List
}

void conditionExpression() : {}
{
   // TODO: once we switch expression package to use AST* from parser package,
   // we might need implement special subclasses for numeric and character constant
   // nodes for the purpose of expression evaluation, instead . For now keep them as 
   // generic ASTScalar and purge from the parent node to keep compatible with QualifierTranslator.

        // Path without any operator will go to numeric expression.
        // This done intentionally to remove lookahead that leads
        // to dramatically perfomance degradation (parser can become 3 times slower)
		numericExpression()
    |
        stringExpression()
	|
		<NULL> #Scalar(0)
	|
    	aggregateExpression()
    |
        dateTimeFunction()
}

void stringParameter() : {}
{
        pathExpression()
    |
        stringExpression()
    |
        customFunction()
    |
        customOperator()
    |
        customAggregate()
}

void stringLiteral() :  {}
{
    <SINGLE_QUOTED_STRING> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
    |
    <DOUBLE_QUOTED_STRING> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
}

void stringExpression() : {}
{
    stringLiteral()
    |
    functionsReturningStrings()
}

void scalarExpression() : {} 
{
  	   conditionExpression()
	|
	  <TRUE> { jjtThis.setValue(true); }  #Scalar(0)
	| 
	  <FALSE> { jjtThis.setValue(false); }  #Scalar(0)
}

void scalarConstExpression() : {}
{
	  <SINGLE_QUOTED_STRING> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
	|
	  <DOUBLE_QUOTED_STRING> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
	| 
	  namedParameter()
	| 
	  <INT_LITERAL>   { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
	| 
	  <FLOAT_LITERAL> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
	|
	  <TRUE>  { jjtThis.setValue(true);  } #Scalar(0)
	| 
	  <FALSE> { jjtThis.setValue(false); } #Scalar(0)
}

void numericExpression() : {}
{
    bitwiseOr()
}

void bitwiseOr() : {}
{
    bitwiseXor()
    (
        "|" bitwiseXor() #BitwiseOr(2)
    )*
}

void bitwiseXor() : {}
{
    bitwiseAnd()
    (
        "^" bitwiseAnd() #BitwiseXor(2)
    )*
}

void bitwiseAnd() : {}
{
    bitwiseShift()
    (
        "&" bitwiseShift() #BitwiseAnd(2)
    )*
}

void bitwiseShift(): {}
{
    arithmeticExp()
    (
        "<<" arithmeticExp() #BitwiseLeftShift(2)
      | 
        ">>" arithmeticExp() #BitwiseRightShift(2)
    )*
}


void arithmeticExp() : {}
{
    multiplySubtractExp() 
    ( 
        "+" multiplySubtractExp() #Add(2)
    |
        "-" multiplySubtractExp() #Subtract(2)
    )*
}

void multiplySubtractExp() : {} 
{
    numericTermExt() 
    ( 
        <ASTERISK> numericTermExt() #Multiply(2)
    |
        "/" numericTermExt() #Divide(2)
    )*
}

void numericTermExt() : {}
{
        numericTerm()
    |
        "~" numericTerm()  #BitwiseNot(1)
}

  
void numericTerm() : {} 
{
        ( "+" )?  numericPrimary ()
    | 
        "-"  numericTerm() #Negate(1)
}


void numericPrimary() : {} 
{
		// technically we shouldn't make a condition a child of scalar expression
		// but this will be handled in the code to avoid long lookaheads
		
		"(" orCondition() ")"
	|
	   <INT_LITERAL> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
	| 
	   <FLOAT_LITERAL>{ jjtThis.setValue(token_source.literalValue); }  #Scalar(0)
	|
        namedParameter()
    |
        functionsReturningNumerics()
	|
        pathExpression()
    |
        customFunction()
    |
        customOperator()
    |
        customAggregate()
}

void functionsReturningStrings() : { }
{
	concat() | substring() | trim() | lower() | upper()
}

void customFunction() #CustomFunction : { }
{
    <FUNCTION> "(" stringLiteral() ( "," ( stringExpression() | numericExpression() ) )* ")"
}

void customOperator() #CustomOperator : { }
{
    <OPERATOR> "(" stringLiteral() ( "," ( stringExpression() | numericExpression() ) )* ")"
}

void customAggregate() #CustomAggregate : { }
{
    <AGGREGATE> "(" stringLiteral() ( "," ( stringExpression() | numericExpression() ) )* ")"
}

void concat() #Concat : { }
{
	<CONCAT> "(" stringParameter() ( "," stringParameter() )* ")"
}

void substring() #Substring : { }
{
	<SUBSTRING> "(" stringParameter() "," numericExpression() ["," numericExpression()] ")"
}

void trim() #Trim : { }
{
	<TRIM> "(" stringParameter() ")"
}

void lower() #Lower : { }
{
	<LOWER> "(" stringParameter() ")"
}

void upper() #Upper : { }
{
	<UPPER> "(" stringParameter() ")"
}

void functionsReturningNumerics() : { }
{
	length() | locate() | abs() | sqrt() | mod() | dateTimeExtractingFunction()
}

void length() #Length : { }
{
	<LENGTH> "(" stringParameter() ")"
}

void locate() #Locate : { }
{
	<LOCATE> "(" stringParameter() "," stringParameter() ["," numericExpression()] ")"
}

void abs() #Abs : { }
{
	<ABS> "(" numericExpression() ")"
}

void sqrt() #Sqrt : { }
{
	<SQRT> "(" numericExpression() ")"
}

void mod() #Mod : { }
{
	<MOD> "(" numericExpression() "," numericExpression() ")"
}

void aggregateExpression() : { }
{
	avg() | max() | min() | sum() | count()
}

void asterisk() #Asterisk : {}
{
    <ASTERISK>
}

void count() #Count : { }
{
	<COUNT> "(" ( asterisk() | pathExpression() | distinct() ) ")"
}

void avg() #Avg : { }
{
	<AVG> "(" numericExpression() ")"
}

void max() #Max : { }
{
	<MAX> "(" numericExpression() ")"
}

void min() #Min : { }
{
	<MIN> "(" numericExpression() ")"
}

void sum() #Sum : { }
{
	<SUM> "(" numericExpression() ")"
}

void dateTimeFunction() : { }
{
    currentDate() | currentTime() | currentTimestamp()
}

void currentDate() #CurrentDate : {}
{
    <CURRENT_DATE> "(" ")"
}

void currentTime() #CurrentTime : {}
{
    <CURRENT_TIME> "(" ")"
}

void currentTimestamp() #CurrentTimestamp : {}
{
    <CURRENT_TIMESTAMP> "(" ")"
}

/* Date/time parts extracting function */
void dateTimeExtractingFunction() #Extract(1) : {
    Token t;
}
{
    (
        t = <YEAR>
        | t = <MONTH>
        | t = <WEEK>
        | t = <DAY_OF_YEAR>
        | t = <DAY>
        | t = <DAY_OF_MONTH>
        | t = <DAY_OF_WEEK>
        | t = <HOUR>
        | t = <MINUTE>
        | t = <SECOND>
    ) {
        jjtThis.setPartToken(t.image);
    }
    "(" pathExpression() ")"
}

void distinct() #Distinct : { }
{
	<DISTINCT> "(" pathExpression() ")"
}

TOKEN_MGR_DECLS:
{
      /** Holds the last value computed by a constant token. */
    Object literalValue;
    
      /** Holds the last string literal parsed. */
    private StringBuffer stringBuffer;

      /** Converts an escape sequence into a character value. */
    private char escapeChar()
    {
        int ofs = image.length() - 1;
        switch ( image.charAt(ofs) ) {
            case 'n':   return '\n';
            case 'r':   return '\r';
            case 't':   return '\t';
            case 'b':   return '\b';
            case 'f':   return '\f';
            case '\\':  return '\\';
            case '\'':  return '\'';
            case '\"':  return '\"';
        }

          // Otherwise, it's an octal number.  Find the backslash and convert.
        while ( image.charAt(--ofs) != '\\' )
          {}
        int value = 0;
        while ( ++ofs < image.length() )
            value = (value << 3) | (image.charAt(ofs) - '0');
        return (char) value;
    }

    private Object makeInt()
    {
        Object  result;
        String  s = image.toString();
        int     base = 10;

        if ( s.charAt(0) == '0' )
            base = (s.length() > 1 && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))? 16 : 8;
        if ( base == 16 )
            s = s.substring(2); // Trim the 0x off the front
        switch ( s.charAt(s.length()-1) ) {
            case 'l': case 'L':
                result = Long.valueOf( s.substring(0,s.length()-1), base );
                break;

            case 'h': case 'H':
                result = new BigInteger( s.substring(0,s.length()-1), base );
                break;

            default:
                result = Integer.valueOf( s, base );
                break;
        }
        return result;
    }

    private Object makeFloat()
    {
        String s = image.toString();
        switch ( s.charAt(s.length()-1) ) {
            case 'f': case 'F':
                return Float.valueOf( s );

            case 'b': case 'B':
                return new BigDecimal( s.substring(0,s.length()-1) );

            case 'd': case 'D':
            default:
                return Double.valueOf( s );
        }
    }
}

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : {
	<NULL: "null" | "NULL" >
    |   <TRUE: "true" | "TRUE" >
    |   <FALSE: "false" | "FALSE" >
}

TOKEN : /* aggregates */
{
	<AVG: "avg" >
	|	<MIN: "min" >
	|	<MAX: "max" >
	|	<SUM: "sum" >
	|	<COUNT: "count" >
	|	<DISTINCT: "distinct">
}

TOKEN : /* functions returning strings */
{
	<CONCAT: "concat" >
	|	<SUBSTRING: "substring" >
	|	<TRIM: "trim" >
	|	<LOWER: "lower" >
	|	<UPPER: "upper" >
}

TOKEN : /* functions returning numerics */
{
	<LENGTH: "length" >
	|	<LOCATE: "locate" >
	|	<ABS: "abs" >
	|	<SQRT: "sqrt" >
	|	<MOD: "mod" >
}

TOKEN : /* functions returning datetime */
{
	<CURRENT_DATE: "currentDate" >
	|	<CURRENT_TIME: "currentTime" >
	|	<CURRENT_TIMESTAMP: "currentTimestamp" | "now" >
}

/*
    Data/time parts extracting functions' names.
    MUST be in sync with enum ASTExtract.DateTimePart.
*/
TOKEN :
{
    <YEAR: "year">
    | <MONTH: "month">
    | <WEEK: "week">
    | <DAY_OF_YEAR: "dayOfYear">
    | <DAY: "day">
    | <DAY_OF_MONTH: "dayOfMonth">
    | <DAY_OF_WEEK: "dayOfWeek">
    | <HOUR: "hour">
    | <MINUTE: "minute">
    | <SECOND: "second">
}

/*
Special operations
*/
TOKEN :
{
    <FUNCTION: "fn" >
	|
	<OPERATOR: "op" >
	|
	<AGGREGATE: "agg" >
}

void namedParameter() :{
	Token t;
}
{
	"$" t = <PROPERTY_PATH> { jjtThis.setValue(t.image); } #NamedParameter(0)
}

void pathExpression() : {
   Token t;
}
{
             t = <PROPERTY_PATH> { ExpressionUtils.parsePath(jjtThis, t.image); } #ObjPath(0)
   |
     "obj:"  t = pathToken() { ExpressionUtils.parsePath(jjtThis, t.image); } #ObjPath(0)
   |
     "db:"   t = pathToken() { ExpressionUtils.parsePath(jjtThis, t.image); } #DbPath(0)
   |
     "enum:" t = pathToken() { jjtThis.setEnumValue(t.image); } #Enum(0)
   |
     "dbid:" t = pathToken() { ExpressionUtils.parsePath(jjtThis, t.image); } #DbIdPath(0)
}

TOKEN : {
    <ASTERISK: "*">
}

// this rule returns single token that could be used as a path definition
Token pathToken() : {
    Token t ;
}
{
    (
      t = <PROPERTY_PATH>

    | t = <AVG>
    | t = <MIN>
    | t = <MAX>
    | t = <SUM>
    | t = <COUNT>
    | t = <DISTINCT>

    | t = <CONCAT>
    | t = <SUBSTRING>
    | t = <TRIM>
    | t = <LOWER>
    | t = <UPPER>

    | t = <LENGTH>
    | t = <LOCATE>
    | t = <ABS>
    | t = <SQRT>
    | t = <MOD>

    | t = <CURRENT_DATE>
    | t = <CURRENT_TIME>
    | t = <CURRENT_TIMESTAMP>

    | t = <YEAR>
    | t = <MONTH>
    | t = <DAY>
    | t = <HOUR>
    | t = <MINUTE>
    | t = <SECOND>
    | t = <DAY_OF_MONTH>
    | t = <DAY_OF_WEEK>
    | t = <DAY_OF_YEAR>

    )
    {return t;}
}

TOKEN : {
	<PROPERTY_PATH: <IDENTIFIER> ( "." <IDENTIFIER>) *>
}

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|<DOLLAR_SIGN>)* (["#"]<LETTER> (<LETTER>|<DIGIT>|<DOLLAR_SIGN>)*)? (["+"])? >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
|
  < #DOLLAR_SIGN: ["$"] >
}

/**
 * Quoted Strings, whose object value is stored in the token manager's
 * "literalValue" field. Both single and double qoutes are allowed 
 */
MORE:
{
    "'"  { stringBuffer = new StringBuffer(); }: WithinSingleQuoteLiteral
 |
    "\""  { stringBuffer = new StringBuffer(); }: WithinDoubleQuoteLiteral
}

<WithinSingleQuoteLiteral> MORE:
{
	< ESC: "\\" ( ["n","r","t","b","f","\\","'","`","\""]
                | (["0"-"3"])? ["0"-"7"] (["0"-"7"])?
                )
    >
        { stringBuffer.append( escapeChar() ); }
 |
    < (~["'","\\"]) >
        { stringBuffer.append( image.charAt(image.length()-1) ); }
}

<WithinSingleQuoteLiteral> TOKEN :
{
    <SINGLE_QUOTED_STRING: "'">
        { literalValue = stringBuffer.toString(); }
        : DEFAULT
}

<WithinDoubleQuoteLiteral> MORE :
{
    < STRING_ESC: <ESC> >
        { stringBuffer.append( escapeChar() ); }
 |
    < (~["\"","\\"]) >
        { stringBuffer.append( image.charAt(image.length()-1) ); }
}

<WithinDoubleQuoteLiteral> TOKEN:
{
    <DOUBLE_QUOTED_STRING: "\"">
        { literalValue = stringBuffer.toString(); }
        : DEFAULT
}

/**
 * Integer or real Numeric literal, whose object value is stored in the token manager's
 * "literalValue" field.
 */
TOKEN:
{
    < INT_LITERAL:
        ( "0" (["0"-"7"])* | ["1"-"9"] (["0"-"9"])* | "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ )
        (["l","L","h","H"])?
    >
        { literalValue = makeInt(); }
 |
    < FLOAT_LITERAL:
        ( <DEC_FLT> (<EXPONENT>)? (<FLT_SUFF>)?
        | <DEC_DIGITS> <EXPONENT> (<FLT_SUFF>)?
        | <DEC_DIGITS> <FLT_SUFF>
        )
    >
        { literalValue = makeFloat(); }

 |  < #DEC_FLT: (["0"-"9"])+ "." (["0"-"9"])* | "." (["0"-"9"])+ >
 |  < #DEC_DIGITS: (["0"-"9"])+ >
 |  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
 |  < #FLT_SUFF: ["d","D","f","F","b","B"] >
}
