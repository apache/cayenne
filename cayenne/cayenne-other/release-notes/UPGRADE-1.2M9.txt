Cayenne Upgrade Information 1.2 M9 milestone
Date: 
============================================

UPGRADE FROM M8:

* A number of temporary interfaces introduced earlier in 1.2 to accomodate remote persistence 
  stack are now merged back to the main API:
  
  - QueryExecutionPlan is removed. Its lifecycle methods are moved to Query 9with some changes).
  - PersistenceContext is removed. There is no use for it anymore.
  - GlobalID is removed. ObjectId now handles its functions.

* It wasn't possible to phase out some of the old ObjectId API via deprecation, so methods 
  "getObjClass" and "getObjectClass" are removed completely. Constructors that take Class as the first argument
  are deprecated and will only work if entity naming follows CayenneModeler default conventions of using unqualified
  class name as the entity name.


GENERAL UPGRADE NOTES:

*  WARNING: Most API deprecated in 1.1 is removed from 1.2.

*  For the complete list of new features since the last stable release see 
    User Guide page at  [cayenne_install_dir]/doc/userguide/introduction/whats-new.html

*  Expect CayenneModeler to be backwards compatible and be able to read 
   older project files. However once you save old projects with new Modeler, 
   the latest format will be used, possibly making saved project incompatible 
   with older versions of the Modeler and runtime.

*  Clean Recompile: Cayenne 1.2 introduces a few API changes. Most of them are done 
   to the backend and should not affect the applications written with the earlier versions. 
   However it is a good idea to perform a clean compilation of all Java code that relies on 
   Cayenne. Updating calls to deprecated methods is also a very good idea.
   
   
UPGRADE FROM 1.1:

*  Cayenne tools and runtime now REQUIRE at least JDK 1.4 (or higher). They won't work on JDK 1.3. 
   If you are still on 1.3, upgrade your JDK if you can. If you can not, consider staying on 
   Cayenne 1.1. 

*  1.2 no longer needs Jakarta BeanUtils.

*  1.2 no longer relies on ClassLoader provided by Configuration (this API is deprecated as 
   a matter of fact). Current code uses Thread.currentThread().getContextClassLoader().

*  In 1.2 PostgreSQLAdapter uses DB sequences for primary key generation instead of 
    AUTO_PK_TABLE. To port an existing application, you will need to create those 
    sequences (e.g. using the Modeler) and assign correct current values to them 
    (e.g. taken from the old AUTO_PK_TABLE). After that AUTO_PK_TABLE can be dropped.
    
*  In 1.2 PostgreSQLAdapter's default "BLOB" mapping is changed from "bytea" to "oid". It
   is still possible to use bytea, but watch for the Modeler-generated schema scripts -
   they will contain "oid". The easiest way to migrate your mapping (if you don't want to
   change the DB) is to remap all bytea columns as LONGVARBINARY DbAttributes instead of BLOB.

*  ObjectId methods "getObjClass" and "getObjectClass" are removed (it wasn't possible to deprecate
   them and still preserve meaningful functionality). Constructors that take Class as the first argument
   are deprecated and will only work if entity naming follows CayenneModeler default conventions of 
   using unqualified class name as the entity name.
   
*  TempObjectId is deprecated and is no longer used by Cayenne internally. If you were 
   referencing TempObjectId explicitly in your code (e.g. if(id instanceof TempObjectId) ... ), 
   you will need to modify the code and use "isTemporary()" superclass method.
  
*  The meaning of SnapshotEvent "source" and "postedBy" attributes is reversed per CAY-395 for
   better efficiency. If you implemented custom listeners of SnapshotEvents, you may need to 
   doublecheck their logic. From now on events use DataRowStore as source, and EventBridge or
   ObjectStore as postedBy, depending on whether this was a local or a remote event. I.e. the 
   new structure is the opposite to what we used in 1.1.
   
* Cayenne stack events are no longer sent via a shared "default" EventManager.
  If you were using EventManager.getDefaultManager() to communicate or receive Cayenne stack 
  events, you'll have to switch to Configuration.getEventManager(). Otherwise default manager
  can be accessed as before.

* Query.setLoggingLevel/getLoggingLevel methods are removed from the interface and AbstractQuery
  implementor. As multi-tier Cayenne doesn't use Log4J, it was no longer possible to keep these methods 
  deprecated.
  
* Thread-bound Transactions:
  QueryEngine.performQueries(Collection,OperationObserver resultConsumer,Transaction) is deprecated and 
  no longer used internally to further decouple layers in the access stack. This DOES NOT AFFECT most 
  users. Only if you (a) implemented custom transactions and (b) manually manage their commit/rollback, 
  you will also have to bind and unbind such Transactions to the current thread manually, for Cayenne stack 
  classes to pick them up.
