package org.apache.cayenne.testdo.unsupported_distinct_types.auto;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;
import org.apache.cayenne.exp.Property;
import org.apache.cayenne.testdo.unsupported_distinct_types.Customer;
import org.apache.cayenne.testdo.unsupported_distinct_types.Product;

/**
 * Class _Product was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Product extends CayenneDataObject {

    private static final long serialVersionUID = 1L; 

    @Deprecated
    public static final String LONGVARCHAR_COL_PROPERTY = "longvarcharCol";
    @Deprecated
    public static final String BASE_PROPERTY = "base";
    @Deprecated
    public static final String CONTAINED_PROPERTY = "contained";
    @Deprecated
    public static final String ORDER_BY_PROPERTY = "orderBy";

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> LONGVARCHAR_COL = new Property<String>("longvarcharCol");
    public static final Property<List<Product>> BASE = new Property<List<Product>>("base");
    public static final Property<List<Product>> CONTAINED = new Property<List<Product>>("contained");
    public static final Property<List<Customer>> ORDER_BY = new Property<List<Customer>>("orderBy");

    public void setLongvarcharCol(String longvarcharCol) {
        writeProperty("longvarcharCol", longvarcharCol);
    }
    public String getLongvarcharCol() {
        return (String)readProperty("longvarcharCol");
    }

    public void addToBase(Product obj) {
        addToManyTarget("base", obj, true);
    }
    public void removeFromBase(Product obj) {
        removeToManyTarget("base", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Product> getBase() {
        return (List<Product>)readProperty("base");
    }


    public void addToContained(Product obj) {
        addToManyTarget("contained", obj, true);
    }
    public void removeFromContained(Product obj) {
        removeToManyTarget("contained", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Product> getContained() {
        return (List<Product>)readProperty("contained");
    }


    public void addToOrderBy(Customer obj) {
        addToManyTarget("orderBy", obj, true);
    }
    public void removeFromOrderBy(Customer obj) {
        removeToManyTarget("orderBy", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Customer> getOrderBy() {
        return (List<Customer>)readProperty("orderBy");
    }


}
