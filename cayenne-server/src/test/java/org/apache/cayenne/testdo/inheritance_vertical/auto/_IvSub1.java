package org.apache.cayenne.testdo.inheritance_vertical.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.apache.cayenne.testdo.inheritance_vertical.IvRoot;
import org.apache.cayenne.testdo.inheritance_vertical.IvSub1;

/**
 * Class _IvSub1 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _IvSub1 extends IvRoot {

    private static final long serialVersionUID = 1L;

    public static final EntityProperty<IvSub1> SELF = PropertyFactory.createSelf(IvSub1.class);

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Double> PRICE = PropertyFactory.createNumeric("price", Double.class);
    public static final StringProperty<String> SUB1NAME = PropertyFactory.createString("sub1Name", String.class);

    protected Double price;
    protected String sub1Name;


    public void setPrice(Double price) {
        beforePropertyWrite("price", this.price, price);
        this.price = price;
    }

    public Double getPrice() {
        beforePropertyRead("price");
        return this.price;
    }

    public void setSub1Name(String sub1Name) {
        beforePropertyWrite("sub1Name", this.sub1Name, sub1Name);
        this.sub1Name = sub1Name;
    }

    public String getSub1Name() {
        beforePropertyRead("sub1Name");
        return this.sub1Name;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "price":
                return this.price;
            case "sub1Name":
                return this.sub1Name;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "price":
                this.price = (Double)val;
                break;
            case "sub1Name":
                this.sub1Name = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.price);
        out.writeObject(this.sub1Name);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.price = (Double)in.readObject();
        this.sub1Name = (String)in.readObject();
    }

}
