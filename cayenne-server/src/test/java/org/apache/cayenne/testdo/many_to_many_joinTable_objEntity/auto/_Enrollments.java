package org.apache.cayenne.testdo.many_to_many_joinTable_objEntity.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.testdo.many_to_many_joinTable_objEntity.Course;
import org.apache.cayenne.testdo.many_to_many_joinTable_objEntity.Student;

/**
 * Class _Enrollments was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Enrollments extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String STUDENT_ID_PK_COLUMN = "student_id";
    public static final String COURSE_ID_PK_COLUMN = "course_id";

    public static final EntityProperty<Course> ENROLLMENTS_TO_COURSE = PropertyFactory.createEntity("enrollments_to_course", Course.class);
    public static final EntityProperty<Student> ENROLLMENTS_TO_STUDENT = PropertyFactory.createEntity("enrollments_to_student", Student.class);


    protected Object enrollments_to_course;
    protected Object enrollments_to_student;

    public void setEnrollments_to_course(Course enrollments_to_course) {
        setToOneTarget("enrollments_to_course", enrollments_to_course, true);
    }

    public Course getEnrollments_to_course() {
        return (Course)readProperty("enrollments_to_course");
    }

    public void setEnrollments_to_student(Student enrollments_to_student) {
        setToOneTarget("enrollments_to_student", enrollments_to_student, true);
    }

    public Student getEnrollments_to_student() {
        return (Student)readProperty("enrollments_to_student");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "enrollments_to_course":
                return this.enrollments_to_course;
            case "enrollments_to_student":
                return this.enrollments_to_student;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "enrollments_to_course":
                this.enrollments_to_course = val;
                break;
            case "enrollments_to_student":
                this.enrollments_to_student = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.enrollments_to_course);
        out.writeObject(this.enrollments_to_student);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.enrollments_to_course = in.readObject();
        this.enrollments_to_student = in.readObject();
    }

}
