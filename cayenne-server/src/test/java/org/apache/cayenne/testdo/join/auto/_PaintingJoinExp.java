/*****************************************************************
 *   Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 ****************************************************************/

package org.apache.cayenne.testdo.join.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.apache.cayenne.testdo.join.ArtistJoinExp;
import org.apache.cayenne.testdo.join.PaintingInfoJoinExp;

/**
 * Class _PaintingJoinExp was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PaintingJoinExp extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String PAINTING_ID_PK_COLUMN = "PAINTING_ID";

    public static final NumericProperty<Integer> PAINTING_JOIN_ID = PropertyFactory.createNumeric("paintingJoinId", Integer.class);
    public static final StringProperty<String> PAINTING_NAME = PropertyFactory.createString("paintingName", String.class);
    public static final EntityProperty<ArtistJoinExp> TO_ARTIST = PropertyFactory.createEntity("toArtist", ArtistJoinExp.class);
    public static final EntityProperty<PaintingInfoJoinExp> PAINTING_INFO = PropertyFactory.createEntity("paintingInfo", PaintingInfoJoinExp.class);

    protected Integer paintingJoinId;
    protected String paintingName;

    protected Object toArtist;
    protected Object paintingInfo;

    public void setPaintingJoinId(int paintingJoinId) {
        beforePropertyWrite("paintingJoinId", this.paintingJoinId, paintingJoinId);
        this.paintingJoinId = paintingJoinId;
    }

    public int getPaintingJoinId() {
        beforePropertyRead("paintingJoinId");
        if(this.paintingJoinId == null) {
            return 0;
        }
        return this.paintingJoinId;
    }

    public void setPaintingName(String paintingName) {
        beforePropertyWrite("paintingName", this.paintingName, paintingName);
        this.paintingName = paintingName;
    }

    public String getPaintingName() {
        beforePropertyRead("paintingName");
        return this.paintingName;
    }

    public ArtistJoinExp getToArtist() {
        return (ArtistJoinExp)readProperty("toArtist");
    }

    public PaintingInfoJoinExp getPaintingInfo() {
        return (PaintingInfoJoinExp)readProperty("paintingInfo");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "paintingJoinId":
                return this.paintingJoinId;
            case "paintingName":
                return this.paintingName;
            case "toArtist":
                return this.toArtist;
            case "paintingInfo":
                return this.paintingInfo;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "paintingJoinId":
                this.paintingJoinId = (Integer)val;
                break;
            case "paintingName":
                this.paintingName = (String)val;
                break;
            case "toArtist":
                this.toArtist = val;
                break;
            case "paintingInfo":
                this.paintingInfo = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.paintingJoinId);
        out.writeObject(this.paintingName);
        out.writeObject(this.toArtist);
        out.writeObject(this.paintingInfo);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.paintingJoinId = (Integer)in.readObject();
        this.paintingName = (String)in.readObject();
        this.toArtist = in.readObject();
        this.paintingInfo = in.readObject();
    }

}
