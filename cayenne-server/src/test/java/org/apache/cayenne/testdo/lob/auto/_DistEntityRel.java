package org.apache.cayenne.testdo.lob.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.CayenneDataObject;
import org.apache.cayenne.exp.Property;
import org.apache.cayenne.testdo.lob.DistEntity;

/**
 * Class _DistEntityRel was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DistEntityRel extends CayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<Integer> NUM = Property.create("num", Integer.class);
    public static final Property<DistEntity> DIST = Property.create("dist", DistEntity.class);

    protected Integer num;

    protected Object dist;

    public void setNum(int num) {
        beforePropertyWrite("num", this.num, num);
        this.num = num;
    }

    public int getNum() {
        beforePropertyRead("num");
        if(this.num == null) {
            return 0;
        }
        return this.num;
    }

    public void setDist(DistEntity dist) {
        setToOneTarget("dist", dist, true);
    }

    public DistEntity getDist() {
        return (DistEntity)readProperty("dist");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "num":
                return this.num;
            case "dist":
                return this.dist;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "num":
                this.num = (Integer)val;
                break;
            case "dist":
                this.dist = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.num);
        out.writeObject(this.dist);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.num = (Integer)in.readObject();
        this.dist = in.readObject();
    }

}
