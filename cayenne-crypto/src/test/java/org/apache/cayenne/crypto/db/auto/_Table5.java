package org.apache.cayenne.crypto.db.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.PersistentObject;
import org.apache.cayenne.crypto.db.Table5;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;

/**
 * Class _Table5 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Table5 extends PersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<Table5> SELF = PropertyFactory.createSelf(Table5.class);

    public static final NumericIdProperty<Integer> ID_PK_PROPERTY = PropertyFactory.createNumericId("ID", "Table5", Integer.class);
    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> CRYPTO_INT1 = PropertyFactory.createNumeric("cryptoInt1", Integer.class);
    public static final NumericProperty<Integer> CRYPTO_INT3 = PropertyFactory.createNumeric("cryptoInt3", Integer.class);
    public static final NumericProperty<Integer> CRYPTO_INT4 = PropertyFactory.createNumeric("cryptoInt4", Integer.class);

    protected Integer cryptoInt1;
    protected Integer cryptoInt3;
    protected Integer cryptoInt4;


    public void setCryptoInt1(int cryptoInt1) {
        beforePropertyWrite("cryptoInt1", this.cryptoInt1, cryptoInt1);
        this.cryptoInt1 = cryptoInt1;
    }

    public int getCryptoInt1() {
        beforePropertyRead("cryptoInt1");
        if(this.cryptoInt1 == null) {
            return 0;
        }
        return this.cryptoInt1;
    }

    public void setCryptoInt3(int cryptoInt3) {
        beforePropertyWrite("cryptoInt3", this.cryptoInt3, cryptoInt3);
        this.cryptoInt3 = cryptoInt3;
    }

    public int getCryptoInt3() {
        beforePropertyRead("cryptoInt3");
        if(this.cryptoInt3 == null) {
            return 0;
        }
        return this.cryptoInt3;
    }

    public void setCryptoInt4(int cryptoInt4) {
        beforePropertyWrite("cryptoInt4", this.cryptoInt4, cryptoInt4);
        this.cryptoInt4 = cryptoInt4;
    }

    public int getCryptoInt4() {
        beforePropertyRead("cryptoInt4");
        if(this.cryptoInt4 == null) {
            return 0;
        }
        return this.cryptoInt4;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "cryptoInt1":
                return this.cryptoInt1;
            case "cryptoInt3":
                return this.cryptoInt3;
            case "cryptoInt4":
                return this.cryptoInt4;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "cryptoInt1":
                this.cryptoInt1 = (Integer)val;
                break;
            case "cryptoInt3":
                this.cryptoInt3 = (Integer)val;
                break;
            case "cryptoInt4":
                this.cryptoInt4 = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.cryptoInt1);
        out.writeObject(this.cryptoInt3);
        out.writeObject(this.cryptoInt4);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.cryptoInt1 = (Integer)in.readObject();
        this.cryptoInt3 = (Integer)in.readObject();
        this.cryptoInt4 = (Integer)in.readObject();
    }

}
