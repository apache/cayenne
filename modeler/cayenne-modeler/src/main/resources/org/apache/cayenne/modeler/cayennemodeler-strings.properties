#   Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.

cayenne.bugreport.url = http://issues.apache.org/jira/browse/CAY

cayenne.modeler.about.info = (c) 2001-2016 Apache Software Foundation and individual authors.\
    <br><br>http://cayenne.apache.org/<br>


# "New Project" dialog.
cayenne.modeler.project.cancel.button = Close
cayenne.modeler.project.cancel.button.ShortDescription = Do not create project

cayenne.modeler.project.app.name = Cayenne Application Project
cayenne.modeler.project.app.button = Create Application
cayenne.modeler.project.app.button.ShortDescription = Create new application project
cayenne.modeler.project.app.desc = Cayenne application project should be used for standalone \
    applications. It consists of "cayenne.xml" file and a set of linked DataMaps and DataNodes. \
    There can be only one "cayenne.xml" in any Java application. If you are creating a Cayenne-\
    based shared library or framework, use Data Map project instead.

cayenne.modeler.project.map.name = Cayenne DataMap Project
cayenne.modeler.project.map.button = Create DataMap
cayenne.modeler.project.map.button.ShortDescription = Create new DataMap project
cayenne.modeler.project.map.desc = DataMap project is a single DataMap that describes database \
    mapping. It does not contain any database connection settings. DataMaps are normally \
    distributed as a part of Cayenne-based library. They can be imported into Cayenne Application \
    projects that provide needed connection information.


# "Generate Classes" Dialog
cayenne.modeler.classgenerator.selectall.button = Select All
cayenne.modeler.classgenerator.selectall.button.ShortDescription = Select All Classes

cayenne.modeler.classgenerator.generate.button = Generate
cayenne.modeler.classgenerator.generate.button.ShortDescription = Generate Java Classes

cayenne.modeler.classgenerator.cancel.button = Cancel
cayenne.modeler.classgenerator.cancel.button.ShortDescription = Cancel Class Generation

cayenne.modeler.classgenerator.choose.button = Select
cayenne.modeler.classgenerator.choose.button.ShortDescription = Select Output Directory

cayenne.modeler.classgenerator.choosetemplate.button = Select
cayenne.modeler.classgenerator.choosetemplate.button.ShortDescription = Select Custom Template

cayenne.modeler.classgenerator.choosesupertemplate.button = Select
cayenne.modeler.classgenerator.choosesupertemplate.button.ShortDescription = Select Custom Superclass Template

# DbEntityValidation Dialog
cayenne.modeler.dbentityvalidation.generateopts.button = Continue
cayenne.modeler.dbentityvalidation.generateopts.button.ShortDescription = Continue With DB Schema Generation

cayenne.modeler.dbentityvalidation.cancel.button = Cancel
cayenne.modeler.dbentityvalidation.cancel.button.ShortDescription = Cancel DB Schema Generation

# CacheSyncConfig Dialog
cayenne.modeler.cacheSyncConfig.save.button = Done
cayenne.modeler.cacheSyncConfig.save.button.ShortDescription =Done
cayenne.modeler.cacheSyncConfig.cancel.button = Cancel
cayenne.modeler.cacheSyncConfig.cancel.button.ShortDescription = Cancel

cayenne.modeler.jgroupConfig.radio1 = Standard Configuration
cayenne.modeler.jgroupConfig.radio2 = Use Configuration File

#  ConfigureClasspath Dialog
cayenne.modeler.configClasspath.save.button = Done
cayenne.modeler.configClasspath.save.button.ShortDescription = Done
cayenne.modeler.configClasspath.cancel.button = Cancel
cayenne.modeler.configClasspath.cancel.button.ShortDescription = Cancel

cayenne.modeler.configClasspath.addjar.button = Add Jar/Zip
cayenne.modeler.configClasspath.addjar.button.ShortDescription = Add Jar/Zip
cayenne.modeler.configClasspath.adddir.button = Add Class Folder
cayenne.modeler.configClasspath.adddir.button.ShortDescription = Add Class Folder
cayenne.modeler.configClasspath.remove.button = Remove
cayenne.modeler.configClasspath.remove.button.ShortDescription = Remove

#  ObjRelationshipInfo Dialog
cayenne.modeler.mapObjRelationship.save.button = Done
cayenne.modeler.mapObjRelationship.save.button.ShortDescription = Done
cayenne.modeler.mapObjRelationship.cancel.button = Cancel
cayenne.modeler.mapObjRelationship.cancel.button.ShortDescription = Cancel
cayenne.modeler.mapObjRelationship.continue.button = Continue
cayenne.modeler.mapObjRelationship.continue.button.ShortDescription = Continue

cayenne.modeler.mapObjRelationship.newrel.button = New DbRelationship
cayenne.modeler.mapObjRelationship.newrel.button.ShortDescription = New DbRelationship

cayenne.modeler.mapObjRelationship.select.path.button = Select Path
cayenne.modeler.mapObjRelationship.select.path.button.ShortDescription = Select Path
cayenne.modeler.mapObjRelationship.revert.path.button = Revert Path
cayenne.modeler.mapObjRelationship.revert.path.button.ShortDescription = Revert Path
cayenne.modeler.mapObjRelationship.clear.path.button = Clear Path
cayenne.modeler.mapObjRelationship.clear.path.button.ShortDescription = Clear Path

cayenne.modeler.mapObjRelationship.source1.button = 
cayenne.modeler.mapObjRelationship.source2.button =

#  QueryType Dialog
cayenne.modeler.queryType.create.button = Create
cayenne.modeler.queryType.create.button.ShortDescription = Create

cayenne.modeler.queryType.cancel.button = Cancel
cayenne.modeler.queryType.cancel.button.ShortDescription = Cancel

cayenne.modeler.queryType.selectQuery.radio = Object Select Query
cayenne.modeler.queryType.selectQuery.radio.ShortDescription = Object Select Query

cayenne.modeler.queryType.sqlQuery.radio = Raw SQL
cayenne.modeler.queryType.sqlQuery.radio.ShortDescription = Raw SQL

cayenne.modeler.queryType.procedureQuery.radio = Stored Procedure Query
cayenne.modeler.queryType.procedureQuery.radio.ShortDescription = Stored Procedure Query

cayenne.modeler.queryType.ejbqlQuery.radio = EJBQL Query
cayenne.modeler.queryType.ejbqlQuery.radio.ShortDescription = EJBQL Query

#  DataMap DefaultsPreferences Dialog
cayenne.modeler.datamap.defaultprefs.update.button = Update
cayenne.modeler.datamap.defaultprefs.update.button.ShortDescription = Update

cayenne.modeler.datamap.defaultprefs.cancel.button = Cancel
cayenne.modeler.datamap.defaultprefs.cancel.button.ShortDescription = Cancel

cayenne.modeler.datamap.defaultprefs.schema.radio = Set/update schema for all DbEntities
cayenne.modeler.datamap.defaultprefs.schemanull.radio = Do not override existing non-empty schema

cayenne.modeler.datamap.defaultprefs.package.radio = Set/update package for all ObjEntities and Embeddables (create default class names if missing)
cayenne.modeler.datamap.defaultprefs.packagenull.radio = Do not override class names with packages

cayenne.modeler.datamap.defaultprefs.superclass.radio = Set/update superclass for all ObjEntities
cayenne.modeler.datamap.defaultprefs.superclassnull.radio = Do not override existing non-empty superclasses

cayenne.modeler.datamap.defaultprefs.locktype.radio = Set/update lock type for all ObjEntities
cayenne.modeler.datamap.defaultprefs.locktypenull.radio = Do not override optimistic locking settings
