<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Starting Client Project</title>
    <section xml:id="create-rop-client-project">
        <title>Create an ROP Client Project in Eclipse</title>
        <para>Creation of a new Eclipse project has been discussed in some details in "Getting
            Started with Cayenne" guide, so we will omit the screenshots for the common
            parts.</para>
        <para>In Eclipse select "File &gt; New &gt; Other..." and then "Maven &gt; Maven Project".
            Click "Next". On the following screen check "Create a simple project" checkbox and click
            "Next" again. In the dialog shown on the screenshot below, enter "org.example.cayenne"
            for the "Group Id" and "tutorial-rop-client" for the "Artifact Id" (both without the
            quotes) and click "Finish". </para>
        <para>Now you should have a new empty project in the Eclipse workspace. Check that the
            project Java compiler settings are correct. Rightclick on the "tutorial-rop-client"
            project, select "Properties &gt; Java Compiler" and ensure that "Compiler compliance
            level" is at least 1.5 (some versions of Maven plugin seem to be setting it to 1.4 by
            default).</para>
    </section>
    <section xml:id="create-client-java-classes">
        <title>Create Client Java Classes</title>
        <para>The client doesn't need the XML ORM mapping, as it is loaded from the server. However
            it needs the client-side Java classes. Let's generate them from the existing
            mapping:</para>
        <itemizedlist>
            <listitem>
                <para>Start CayenneModeler and open cayenne.xml from the "tutorial" project (located
                    under "tutorial/src/main/resources", unless it is already open.</para>
            </listitem>
            <listitem>
                <para>Select the "datamap" DataMap and check "Allow Client Entities"
                    checkbox.</para>
            </listitem>
            <listitem>
                <para>Enter "org.example.cayenne.persistent.client" for the "Client Java Package"
                    and click "Update.." button next to the field to refresh the client package of
                    all entities.</para>
                <para><inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="images/datamap-enableclient.png" scalefit="1" width="100%"/>
                        </imageobject>
                    </inlinemediaobject></para>
            </listitem>
        </itemizedlist>
        <itemizedlist>
            <listitem>
                <para>Select "Tools &gt; Generate Classes" menu.</para>
            </listitem>
            <listitem>
                <para>For "Type" select "Client Persistent Objects".</para>
            </listitem>
            <listitem>
                <para>For the "Output Directory" select "tutorial-rop-client/src/main/java" folder
                    (as client classes should go in the <emphasis role="italic">client</emphasis>
                    project).</para>
            </listitem>
            <listitem>
                <para>Click on "Classes" tab and check the "Check All Classes" checkbox (unless it
                    is already checked and reads "Uncheck all Classes").</para>
            </listitem>
            <listitem>
                <para>Click "Generate".</para>
            </listitem>
        </itemizedlist>
        <para>Now go back to Eclipse, right click on "tutorial-rop-client" project and select
            "Refresh" - you should see pairs of classes generated for each mapped entity, same as on
            the server. And again, we see a bunch of errors in those classes. Let's fix it now by
            adding two dependencies, "cayenne-client" and "resin-hessian", in the bottom of the
            pom.xml file. We also need to add Caucho M2 repository to pull Hessian jar files. The
            resulting POM should look like this:</para>
        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;org.example.cayenne&lt;/groupId&gt;
    &lt;artifactId&gt;tutorial-rop-client&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.cayenne&lt;/groupId&gt;
            &lt;artifactId&gt;cayenne-client&lt;/artifactId&gt;
            &lt;!-- Here specify the version of Cayenne you are actually using --&gt;
            &lt;version&gt;4.0.M3&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
        &lt;groupId&gt;com.caucho&lt;/groupId&gt;
            &lt;artifactId&gt;hessian&lt;/artifactId&gt;
            &lt;version&gt;4.0.38&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;caucho&lt;/id&gt;
            &lt;name&gt;Caucho Repository&lt;/name&gt;
            &lt;url&gt;http://caucho.com/m2&lt;/url&gt;
            &lt;layout&gt;default&lt;/layout&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;/snapshots&gt;
            &lt;releases&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/releases&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
&lt;/project&gt;</programlisting>
        <para>Your computer must be connected to the internet. Once you save the pom.xml, Eclipse
            will download the needed jar files and add them to the project build path. After that
            all the errors should disappear.</para>
        <para>Now let's check the entity class pairs. They look almost identical to their server
            counterparts, although the superclass and the property access code are different. At
            this point these differences are somewhat academic, so let's go on with the
            tutorial.</para>
    </section>
</chapter>
