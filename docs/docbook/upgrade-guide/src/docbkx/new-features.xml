<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
	<title>Guide to 4.0 Features</title>
	<para>This guide highlights the new features and changes introduced in Apache Cayenne 4.0. For a full list of changes consult
		RELEASE-NOTES.txt included in Cayenne download. For release-specific upgrade instructions check UPGRADE.txt.</para>
	<section xml:id="java-version">
		<title>Java Version</title>
		<para>Minimum required JDK version is 1.6 or newer. Cayenne 4.0 is fully tested with Java 1.6, 1.7, 1.8. </para>
		<para>The examples below often use Java 8 syntax. But those same examples should work without lambdas just as well.</para>
	</section>
	<section xml:id="cayenne-configuration">
		<title>Cayenne Configuration</title>
		<section>
			<title>ServerRuntimeBuilder</title>
			<para>Cayenne 3.1 introduced dependency injection and ServerRuntime. 4.0 provides a very convenient utility to create a custom runtime
				with various extensions. This reduces the code needed to integrate Cayenne in your environment to just a few lines and no
				boilerplate.
				E.g.:<programlisting>ServerRuntime runtime = new ServerRuntimeBuilder("myproject")
        .addConfigs("cayenne-project1.xml", "cayenne-project2.xml")
        .addModule(binder -> binder.bind(JdbcEventLogger.class).toInstance(myLogger))
        .dataSource(myDataSource)
        .build();</programlisting></para>
		</section>
		<section>
			<title>Mapping-free ServerRuntime</title>
			<para>ServerRuntime can now be started without any ORM mapping at all. This is useful in situations when Cayenne is used as a stack to
				execute raw SQL, in unit tests, etc.</para>
		</section>
	</section>
	<section xml:id="framework-api">
		<title>Framework API</title>
		<section>
			<title>Fluent Query API</title>
			<para>Fluent Query API is one of the most exciting new features in Cayenne 4.0. This syntax is "chainable" so you can write query
				assembly and execution code on one line. The most useful fluent queries are ObjectSelect, SQLSelect and SelectById:</para>
			<section>
				<title>ObjectSelect</title>
				<para>A "chainable" analog of SelectQuery.
					<programlisting>Artist a = ObjectSelect
     .query(Artist.class)
     .where(Artist.ARTIST_NAME.eq("Picasso"))
     .selectOne(context);</programlisting></para>
			</section>
			<section>
				<title>SQLSelect</title>
				<para>A "chainable" analog of SQLTemplate used specifically to run selecting raw
					SQL:<programlisting>List&lt;Long> ids = SQLSelect
     .scalarQuery(Long.class, "SELECT ARTIST_ID FROM ARTIST ORDER BY ARTIST_ID")
     .select(context);</programlisting></para>
			</section>
			<section>
				<title>SelectById</title>
				<para>There's really no good analog of SelectById in Cayenne prior to 4.0. Previously available ObjectIdQuery didn't support half of
					the features of SelectById (e.g. caching consistent with other queries, prefetches, etc.)
					:<programlisting>Artist a = SelectById
     .query(Artist.class, 3)
     .useLocalCache("g1")
     .selectOne(context)</programlisting></para>
			</section>
		</section>
		<section xml:id="objectcontext">
			<title>ObjectContext</title>
			<section>
				<title>Callback-based Object Iterator</title>
				<para>ObjectContext now features a simpler way to iterate over large result sets, based on callback interface that can be
					implemented with a
					lambda:<programlisting>SelectQuery&lt;Artist> q = new SelectQuery&lt;Artist>(Artist.class);

context.iterate(q, (Artist a) -> {
    // do something with the object...
    ...
});</programlisting></para>
			</section>
		</section>
		<section>
			<title>Generics in Expressions and Queries</title>
			<para>We finished the work of "genericizing" Cayenne APIs started in 3.1. Now all APIs dealing with persistent objects (Expressions,
				Queries, ObjectContext, etc.) support generics of Persistent object type or attribute property type.</para>
		</section>
		<section>
			<title>Property API</title>
			<para>Persistent superclasses (_MyEntity) now contain a set of static Property&lt;T> variables generated from the model. These
				metadata objects make possible to create type-safe Expressions and other query parts.</para>
		</section>
		<section>
			<title>Positional Parameter Bindings </title>
			<para>Expressions and SQLTemplate traditionally supported binding of parameters by name as a map. Cayenne 4.0 introduces a very easy
				form of positional bindings. It works with the same named template format, only parameters are bound by position, left-to-right.
				Here we showing a more complex example with the same parameter name being used more than once in the
				query:<programlisting>// two distinct names, 3 positional parameters.
// "price" is set to 23, "maxPrice" - to 50
Expression e = ExpressionFactory.exp(
     "price = $price or averagePrice = $price and maxPrice = $maxPrice", 23, 50);</programlisting>This
				API is supported in Expressions, SQLTemplate as well as new SQLSelect and can be used interchnageably with named parameters with a
				single template flavor.</para>
		</section>
		<section>
			<title>Improved Transaction API</title>
			<para>Transaction factory is now setup via DI (instead of being configured in the Modeler). There's a utility method on ServerRuntime
				to perform multiple operations as one
				transaction:<programlisting>runtime.performInTransaction(() -> {
	// ... do some changes
	context.commitChanges();

	// ... do more changes
	context.commitChanges();

	return true;
});</programlisting></para>
		</section>
		<section>
			<title>Transparent Database Cryptography with "cayenne-crypto" Module</title>
			<para>Cayenne includes a new module called "cayenne-crypto" that enables transparent cryptography for designated data columns. This is
				a pretty cool feature that allows to enable encryption/decryption of your sensitive data pretty much declaratively using your
				regular DB storage. Encrypted values can be stored in (VAR)BINARY and (VAR)CHAR columns. Currently "cayenne-crypto" supports
				AES/CBC/PKCS5Padding encryption (though other cyphers can be added). It also supports encrypted data compression. Here is an example
				of building a crypto DI module that can be added to
				ServerRuntime:<programlisting>Module cryptoExtensions = new CryptoModuleBuilder()
	.keyStore("file:///mykeystore", "keystorepassword".toCharArray(), "keyalias")
	.compress()
	.build();</programlisting></para>
		</section>
	</section>
	<section xml:id="cayenne-modeler">
		<title>CayenneModeler</title>
		<section>
			<title>Improved UI</title>
			<para>CayenneModeler features a number of UI improvements. Attributes and relationships are now edited in the same view (no need to
				switch between the tabs). Project tree allows to easily filter elements by type and quickly collapse the tree.</para>
		</section>
		<section>
			<title>Dropped Support for Mapping Listeners</title>
			<para>Managing listeners in the DataMap XML model is counterproductive and confusing, so support for listeners was removed from both
				the XML and the Modeler. If you previously had listeners mapped in the model, annotate their callback methods, and perform listener
				registration in the code: <programlisting>runtime.getDataDomain().addListener(myListener);</programlisting>Entity callbacks on the
				other hand are managed in the Modeler as before.</para>
		</section>
	</section>
	<section xml:id="build-tools">
		<title>Build Tools</title>
		<section>
			<title>cdbimport</title>
			<para>"cdbimport" has evolved from an experiment to a full-featured production tool that significantly reduces (and sometimes
				eliminates) the need for manual maintenance of the DataMaps in CayenneModeler. Two improvements made this possible. First, smart
				merge algorithm will ensure that custom changes to the model are not overridden on subsequent runs of "cdbimport". Second, the
				mechanism for specifing DB reverse-engineering parameters, such as name filtering, is made much more powerful with many new options.
				E.g. we started supporting filters by catalogs and schemas, table name filters can be added per catalog/schema or at the top level,
				etc. Also configuration can be "inlined" in a Maven pom.xml or specified as a separate file.</para>
		</section>
		<section>
			<title>cgen</title>
			<para>As was mentioned above, cgen now includes Property&lt;T> static variables for expression building. It is also made smarter about
				its defaults for "destDir" and "superPkg".</para>
		</section>
	</section>
</article>
