/*****************************************************************
 *   Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 ****************************************************************/
package org.apache.cayenne.ejbql.parser;

import java.util.Map;

import org.apache.cayenne.ejbql.EJBQLException;
import org.apache.cayenne.ejbql.EJBQLExpression;
import org.apache.cayenne.map.EntityResolver;
import org.apache.cayenne.reflect.ClassDescriptor;

/**
 * Defines public parser functionality. Subclasses generated by JavaCC define the actual
 * parser.
 * 
 * @author Andrus Adamchik
 * @since 3.0
 */
abstract class AbstractParser {

     Map descriptorsById;
     EntityResolver resolver;
     String source;


    private final boolean callbacksEnabled() {
        return resolver != null;
    }

    void fromItemLoaded(EJBQLExpression expression) {

        if (!callbacksEnabled()) {
            return;
        }

        if (expression.getChildrenCount() != 2) {
            throw new EJBQLException("Expected 2 children, got: "
                    + expression.getChildrenCount());
        }

        // TODO: andrus, 2/28/2007 - resolve path ... for now only support direct
        // entity
        // names
        EJBQLExpression abstractSchemaName = expression.getChild(0);
        String schemaName = abstractSchemaName.getChild(0).getText();

        ClassDescriptor descriptor = resolver.getClassDescriptor(schemaName);
        if (descriptor == null) {
            throw new EJBQLException("Unmapped abstract schema name: " + schemaName);
        }

        String idVariable = expression.getChild(1).getText();

        // per JPA spec, 4.4.2, "Identification variables are case insensitive."
        idVariable = idVariable.toLowerCase();

        ClassDescriptor old = (ClassDescriptor) descriptorsById.put(
                idVariable,
                descriptor);
        if (old != null && old != descriptor) {
            throw new EJBQLException("Duplicate identification variable definition: "
                    + idVariable
                    + ", it is already used for "
                    + old.getEntity().getName());
        }
    }
}
