options {
	
	MULTI = true;
	NODE_DEFAULT_VOID = true;
	
	STATIC = false;
	DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
	DEBUG_TOKEN_MANAGER = false;
	JAVA_UNICODE_ESCAPE = true;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(ExpressionParser)
/*****************************************************************
 *   Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 ****************************************************************/


package org.apache.cayenne.exp.parser;

import java.io.*;
import java.util.*;
import java.math.*;
import org.apache.cayenne.exp.*;

/**
  * Parser of Cayenne Expressions. 
  *
  * @since 1.1
  */ 
public class ExpressionParser {
    public static void main(String[] arg) {
        // since Main is used for some basic speed measuring,
        // lets run it twice to "warm up" the parser
        Expression.fromString(arg[0]);
        
        long start = System.currentTimeMillis();
        Expression exp = Expression.fromString(arg[0]);
        long end = System.currentTimeMillis();
        
        System.out.println(exp);
        System.out.println("Parsed in " + (end - start) + " ms.");
    }
}

PARSER_END(ExpressionParser)


Expression expression() : {}
{
	orCondition() <EOF> 
    { 
        return (Expression) jjtree.rootNode(); 
    }
}

void orCondition() : {}
{
	andCondition() ( "or" andCondition() #Or(2) )*
}

void andCondition() : {}
{
	notCondition() ( "and" notCondition() #And(2) )*
}

void notCondition() : {}
{
		( "not" | "!" ) simpleCondition() #Not(1)
	|
		simpleCondition()
}

void simpleCondition() : {} 
{
	<TRUE> #True
	| 
	<FALSE> #False
	| 
	  scalarExpression()
	(
	   simpleNotCondition()
	| 
	  ("="  | "==") scalarExpression() #Equal(2)
	| 
	  ("!=" | "<>")  scalarExpression() #NotEqual(2)
	|
	  "<=" scalarExpression() #LessOrEqual(2)
	| 
	  "<" scalarExpression() #Less(2)
	| 
	  ">"  scalarExpression() #Greater(2)
	| 
	  ">=" scalarExpression() #GreaterOrEqual(2)
	|
		"like" scalarExpression() #Like(2)
	|
	    "likeIgnoreCase"  scalarExpression() #LikeIgnoreCase(2)
	|  
		"in"  
		(  namedParameter() | "(" scalarCommaList() ")" )
		#In(2)
	|  
		"between"  scalarExpression() "and" scalarExpression() #Between(3)
	)?
}

void simpleNotCondition() : {} 
{
	("not" | "!" )
	
	(
		"like" scalarExpression() #NotLike(2)
	|
	    "likeIgnoreCase"  scalarExpression() #NotLikeIgnoreCase(2)
	|  
		"in"  
		(  namedParameter() |  "(" scalarCommaList() ")" )
		#NotIn(2)
	|  
		"between"  scalarExpression() "and" scalarExpression() #NotBetween(3)
	)
}

void scalarCommaList() : {}
{
	(
		scalarConstExpression()
		( ","  scalarConstExpression() )*
	) #List
}

void scalarExpression() : {} 
{
   // TODO: once we switch expression package to use AST* from parser package,
   // we might need implement special subclasses for numeric and character constant
   // nodes for the purpose of expression evaluation, instead . For now keep them as 
   // generic ASTScalar and purge from the parent node to keep compatible with QualifierTranslator.
   
		scalarNumericExpression()
	|
		<SINGLE_QUOTED_STRING> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
	| 
	  	<DOUBLE_QUOTED_STRING> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
	| 
		<NULL> #Scalar(0) 
}

void scalarConstExpression() : {}
{
	  <SINGLE_QUOTED_STRING> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
	|
	  <DOUBLE_QUOTED_STRING> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
	| 
	  namedParameter()
	| 
	  <INT_LITERAL> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
	| 
	   <FLOAT_LITERAL>{ jjtThis.setValue(token_source.literalValue); }  #Scalar(0)
}

void scalarNumericExpression() : {}
{
	multiplySubtractExp() 
	( 
		"+" multiplySubtractExp() #Add(2)
	|
		"-" multiplySubtractExp() #Subtract(2)
	)*
}

void multiplySubtractExp() : {} 
{
	numericTerm() 
	( 
		"*" numericTerm() #Multiply(2)
	|
		"/" numericTerm() #Divide(2)
	)*
}

void numericTerm() : {} 
{
		( "+" )?  numericPrimary ()
	|
		"-"  numericPrimary() #Negate(1)
}

void numericPrimary() : {} 
{
		// technically we shouldn't make a condition a child of scalar expression
		// but this will be handled in the code to avoid long lookaheads
		
		"(" orCondition() ")"
	|
		pathExpression()
	|
		namedParameter()
	|
	   <INT_LITERAL> { jjtThis.setValue(token_source.literalValue); } #Scalar(0)
	| 
	   <FLOAT_LITERAL>{ jjtThis.setValue(token_source.literalValue); }  #Scalar(0)
}

void namedParameter() : 
{
	Token t;
}
{
	"$" t = <PROPERTY_PATH> { jjtThis.setValue(t.image); } #NamedParameter(0)
}


void pathExpression() : {
   Token t;
}
{
   ( 
     t = <PROPERTY_PATH> { jjtThis.setPath(t.image); } #ObjPath(0)
   | 
     "obj:" 
     t = <PROPERTY_PATH> { jjtThis.setPath(t.image); } #ObjPath(0)
   |
     "db:" 
     t = <PROPERTY_PATH> { jjtThis.setPath(t.image); } #DbPath(0)
   )
}


TOKEN_MGR_DECLS:
{
      /** Holds the last value computed by a constant token. */
    Object literalValue;
    
      /** Holds the last string literal parsed. */
    private StringBuffer stringBuffer;

      /** Converts an escape sequence into a character value. */
    private char escapeChar()
    {
        int ofs = image.length() - 1;
        switch ( image.charAt(ofs) ) {
            case 'n':   return '\n';
            case 'r':   return '\r';
            case 't':   return '\t';
            case 'b':   return '\b';
            case 'f':   return '\f';
            case '\\':  return '\\';
            case '\'':  return '\'';
            case '\"':  return '\"';
        }

          // Otherwise, it's an octal number.  Find the backslash and convert.
        while ( image.charAt(--ofs) != '\\' )
          {}
        int value = 0;
        while ( ++ofs < image.length() )
            value = (value << 3) | (image.charAt(ofs) - '0');
        return (char) value;
    }

    private Object makeInt()
    {
        Object  result;
        String  s = image.toString();
        int     base = 10;

        if ( s.charAt(0) == '0' )
            base = (s.length() > 1 && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))? 16 : 8;
        if ( base == 16 )
            s = s.substring(2); // Trim the 0x off the front
        switch ( s.charAt(s.length()-1) ) {
            case 'l': case 'L':
                result = Long.valueOf( s.substring(0,s.length()-1), base );
                break;

            case 'h': case 'H':
                result = new BigInteger( s.substring(0,s.length()-1), base );
                break;

            default:
                result = Integer.valueOf( s, base );
                break;
        }
        return result;
    }

    private Object makeFloat()
    {
        String s = image.toString();
        switch ( s.charAt(s.length()-1) ) {
            case 'f': case 'F':
                return Float.valueOf( s );

            case 'b': case 'B':
                return new BigDecimal( s.substring(0,s.length()-1) );

            case 'd': case 'D':
            default:
                return Double.valueOf( s );
        }
    }
}

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : {
	<NULL: "null" | "NULL" >
|
	<TRUE: "true" | "TRUE" >
|
	<FALSE: "false" | "FALSE" >
}

TOKEN : {
	<PROPERTY_PATH: <IDENTIFIER> ( "." <IDENTIFIER>) *>
}

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}


/** 
 * Quoted Strings, whose object value is stored in the token manager's
 * "literalValue" field. Both single and double qoutes are allowed 
 */
MORE:
{
    "'"  { stringBuffer = new StringBuffer(); }: WithinSingleQuoteLiteral
 |
    "\""  { stringBuffer = new StringBuffer(); }: WithinDoubleQuoteLiteral
}

<WithinSingleQuoteLiteral> MORE:
{
	< ESC: "\\" ( ["n","r","t","b","f","\\","'","`","\""]
                | (["0"-"3"])? ["0"-"7"] (["0"-"7"])?
                )
    >
        { stringBuffer.append( escapeChar() ); }
 |
    < (~["'","\\"]) >
        { stringBuffer.append( image.charAt(image.length()-1) ); }
}

<WithinSingleQuoteLiteral> TOKEN :
{
    <SINGLE_QUOTED_STRING: "'">
        { literalValue = stringBuffer.toString(); }
        : DEFAULT
}

<WithinDoubleQuoteLiteral> MORE :
{
    < STRING_ESC: <ESC> >
        { stringBuffer.append( escapeChar() ); }
 |
    < (~["\"","\\"]) >
        { stringBuffer.append( image.charAt(image.length()-1) ); }
}

<WithinDoubleQuoteLiteral> TOKEN:
{
    <DOUBLE_QUOTED_STRING: "\"">
        { literalValue = stringBuffer.toString(); }
        : DEFAULT
}

/**
 * Integer or real Numeric literal, whose object value is stored in the token manager's
 * "literalValue" field.
 */
TOKEN:
{
    < INT_LITERAL:
        ( "0" (["0"-"7"])* | ["1"-"9"] (["0"-"9"])* | "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ )
        (["l","L","h","H"])?
    >
        { literalValue = makeInt(); }
 |
    < FLOAT_LITERAL:
        ( <DEC_FLT> (<EXPONENT>)? (<FLT_SUFF>)?
        | <DEC_DIGITS> <EXPONENT> (<FLT_SUFF>)?
        | <DEC_DIGITS> <FLT_SUFF>
        )
    >
        { literalValue = makeFloat(); }

 |  < #DEC_FLT: (["0"-"9"])+ "." (["0"-"9"])* | "." (["0"-"9"])+ >
 |  < #DEC_DIGITS: (["0"-"9"])+ >
 |  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
 |  < #FLT_SUFF: ["d","D","f","F","b","B"] >
}
