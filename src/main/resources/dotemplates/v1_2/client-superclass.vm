##   Licensed to the Apache Software Foundation (ASF) under one
##  or more contributor license agreements.  See the NOTICE file
##  distributed with this work for additional information
##  regarding copyright ownership.  The ASF licenses this file
##  to you under the Apache License, Version 2.0 (the
##  "License"); you may not use this file except in compliance
##  with the License.  You may obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing,
##  software distributed under the License is distributed on an
##  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
##  KIND, either express or implied.  See the License for the
##  specific language governing permissions and limitations
##  under the License.
##
##Terminology:
##	Base class - super superclass of entity, ie, org.apache.cayenne.PersistentObject or MyBaseClass
##  Super class - superclass of entity, ie,  org.apache.cayenne.art.auto._Artist
##	Sub class - class of entity, ie, org.apache.cayenne.art.Artist
##
##  Classes available in template
##    objEntity - the ObjEntity class: See org.apache.cayenne.map.ObjectEntity
##    stringUtils - class for string "helper" functions: See org.apache.cayenne.gen.StringUtils
##    entityUtils - class for entity "helper" functions: See org.apache.cayenne.gen.EntityUtils
##    importUtils - class for import statement management: See org.apache.cayenne.gen.ImportUtils
##
##
${importUtils.setPackage($entityUtils.superPackageName)}##
${importUtils.addReservedType("${$entityUtils.superPackageName}.${entityUtils.superClassName}")}##
${importUtils.addType("${entityUtils.basePackageName}.${entityUtils.baseClassName}")}##
#foreach( $attr in ${objEntity.DeclaredAttributes} )
$importUtils.addType(${attr.Type})##
#end
#foreach( $rel in ${objEntity.DeclaredRelationships} )
$importUtils.addType(${rel.TargetEntity.ClientClassName})##
#end
#if( ${entityUtils.hasToManyDeclaredRelationships()} )
${importUtils.addType('java.util.List')}##
#end
#if( ${entityUtils.hasToOneDeclaredRelationships()} )
${importUtils.addType('org.apache.cayenne.ValueHolder')}##
#end
${importUtils.generate()}

/**
 * A generated persistent class mapped as "${objEntity.name}" Cayenne entity. It is a good idea to
 * avoid changing this class manually, since it will be overwritten next time code is
 * regenerated. If you need to make any customizations, put them in a subclass.
 */
public class ${entityUtils.superClassName} extends ${entityUtils.baseClassName} {

## Create ivars names
#foreach( $attr in ${objEntity.DeclaredAttributes} )
    public static final String ${stringUtils.capitalizedAsConstant($attr.Name)}_PROPERTY = "${attr.Name}";
#end
#foreach( $rel in ${objEntity.DeclaredRelationships} )
    public static final String ${stringUtils.capitalizedAsConstant($rel.Name)}_PROPERTY = "${rel.Name}";
#end

## Create ivars
#foreach( $attr in ${objEntity.DeclaredAttributes} )
    protected $importUtils.formatJavaType(${attr.Type}) ${attr.Name};
#end
#foreach( $rel in ${objEntity.DeclaredRelationships} )
#if( $rel.ToMany )
    protected List ${rel.Name};
#else
    protected ValueHolder ${rel.Name};
#end
#end

## Create attribute set/get methods
#foreach( $attr in ${objEntity.DeclaredAttributes} )
    public $importUtils.formatJavaType(${attr.Type}) get${stringUtils.capitalized($attr.Name)}() {
        if(objectContext != null) {
            objectContext.prepareForAccess(this, "${attr.Name}", false);
        }
        
        return ${attr.Name};
    }
#if ("true" != "${objEntity.isReadOnly()}")
    public void set${stringUtils.capitalized($attr.Name)}($importUtils.formatJavaType(${attr.Type}) $stringUtils.formatVariableName(${attr.Name})) {
        if(objectContext != null) {
            objectContext.prepareForAccess(this, "${attr.Name}", false);
        }
        
        Object oldValue = this.${stringUtils.formatVariableName($attr.Name)};
        this.${stringUtils.formatVariableName($attr.Name)} = ${stringUtils.formatVariableName($attr.Name)};
        
        // notify objectContext about simple property change
        if(objectContext != null) {
            objectContext.propertyChanged(this, "${attr.Name}", oldValue, ${stringUtils.formatVariableName($attr.Name)});
        }
    }
#end
    
    
#end
##
##
## Create list add/remove/get methods
#foreach( $rel in ${objEntity.DeclaredRelationships} )
#if( $rel.ToMany )
    public List get${stringUtils.capitalized($rel.Name)}() {
        if(objectContext != null) {
            objectContext.prepareForAccess(this, "${rel.Name}", true);
        }
        
        return ${rel.Name};
    }
#if ( ! $rel.ReadOnly )
    public void addTo${stringUtils.capitalized($rel.Name)}($importUtils.formatJavaType(${rel.TargetEntity.ClientClassName}) object) {
        if(objectContext != null) {
            objectContext.prepareForAccess(this, "${rel.Name}", true);
        }
        
        this.${rel.Name}.add(object);
    }
    public void removeFrom${stringUtils.capitalized($rel.Name)}($importUtils.formatJavaType(${rel.TargetEntity.ClientClassName}) object) {
        if(objectContext != null) {
            objectContext.prepareForAccess(this, "${rel.Name}", true);
        }
        
        this.${rel.Name}.remove(object);
    }
#end
#else
    public $importUtils.formatJavaType(${rel.TargetEntity.ClientClassName}) get${stringUtils.capitalized($rel.Name)}() {
        if(objectContext != null) {
            objectContext.prepareForAccess(this, "${rel.Name}", true);
        }
        
        return ($importUtils.formatJavaType(${rel.TargetEntity.ClientClassName})) ${rel.Name}.getValue();
    }
#if ( !${objEntity.isReadOnly()} && !$rel.ReadOnly )
    public void set${stringUtils.capitalized($rel.Name)}(${importUtils.formatJavaType($rel.TargetEntity.ClientClassName)} $stringUtils.formatVariableName(${rel.Name})) {
        if(objectContext != null) {
            objectContext.prepareForAccess(this, "${rel.Name}", true);
        }
        
        this.${stringUtils.formatVariableName($rel.Name)}.setValue(${stringUtils.formatVariableName($rel.Name)});
    }
#end
#end
    
#end
}
