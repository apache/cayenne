##   Licensed to the Apache Software Foundation (ASF) under one
##  or more contributor license agreements.  See the NOTICE file
##  distributed with this work for additional information
##  regarding copyright ownership.  The ASF licenses this file
##  to you under the Apache License, Version 2.0 (the
##  "License"); you may not use this file except in compliance
##  with the License.  You may obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing,
##  software distributed under the License is distributed on an
##  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
##  KIND, either express or implied.  See the License for the
##  specific language governing permissions and limitations
##  under the License.
#if( ${classGen.isUsingPackage()} )
package ${classGen.packageName};

#end
/** WARNING: This template is deprecated in Cayenne 3.0
  * Class ${classGen.superPrefix}${classGen.className} was generated by Cayenne.
  * It is probably a good idea to avoid changing this class manually, 
  * since it may be overwritten next time code is regenerated. 
  * If you need to make any customizations, please use subclass. 
  */
public abstract class ${classGen.superPrefix}${classGen.className} extends $classGen.superClassName {

## Create property names
#foreach( $attr in ${classGen.Entity.DeclaredAttributes} )
#set( $classGen.Prop = $attr.Name )## let controller know about current property
    public static final String ${classGen.propAsConstantName}_PROPERTY = "${attr.Name}";
#end
#foreach( $rel in ${classGen.Entity.DeclaredRelationships} )
#set( $classGen.Prop = $rel.Name )## let controller know about current property
    public static final String ${classGen.propAsConstantName}_PROPERTY = "${rel.Name}";
#end

#if( $classGen.Entity.DbEntity )
#foreach( $idAttr in ${classGen.Entity.DbEntity.PrimaryKey} )
#set( $classGen.Prop = $idAttr.Name )## let controller know about current property
    public static final String ${classGen.propAsConstantName}_PK_COLUMN = "${idAttr.Name}";
#end
#end

## Create attribute set/get methods
#foreach( $attr in ${classGen.Entity.DeclaredAttributes} )
#set( $classGen.Prop = $attr.Name )## let controller know about current property
#if ("true" != "${classGen.getEntity().isReadOnly()}")
    public void set${classGen.cappedProp}($classGen.formatJavaType(${attr.Type}) $classGen.formatVariableName(${attr.Name})) {
        writeProperty("${attr.Name}", $classGen.formatVariableName(${attr.Name}));
    }
#end
#if ( $classGen.isBoolean(${attr.Type}) )
	public boolean is${classGen.cappedProp}() {
        Boolean value = (Boolean)readProperty("${attr.Name}");
        return (value != null) ? value.booleanValue() : false;
    }
#elseif ( $classGen.isNonBooleanPrimitive(${attr.Type}) )
    public $classGen.formatJavaType(${attr.Type}) get${classGen.cappedProp}() {
        Object value = readProperty("${attr.Name}");
        return (value != null) ? ($classGen.formatJavaTypeAsNonBooleanPrimitive(${attr.Type})) value : 0; 
    }
#else
    public $classGen.formatJavaType(${attr.Type}) get${classGen.cappedProp}() {
        return ($classGen.formatJavaType(${attr.Type}))readProperty("${attr.Name}");
    }
#end


#end
##
## Create list add/remove/get methods
#foreach( $rel in ${classGen.Entity.DeclaredRelationships} )
#set( $classGen.Prop = $rel.Name )## let controller know about current property
#if( $rel.ToMany )
#if ( ! $rel.ReadOnly )
    public void addTo${classGen.cappedProp}($classGen.formatJavaType(${rel.TargetEntity.ClassName}) obj) {
        addToManyTarget("${rel.name}", obj, true);
    }
    public void removeFrom${classGen.cappedProp}($classGen.formatJavaType(${rel.TargetEntity.ClassName}) obj) {
        removeToManyTarget("${rel.name}", obj, true);
    }
#end
    public ${rel.CollectionType} get${classGen.cappedProp}() {
        return (${rel.CollectionType})readProperty("${rel.name}");
    }
#else
#if ( !${classGen.getEntity().isReadOnly()} && !$rel.ReadOnly )
    public void set${classGen.cappedProp}($classGen.formatJavaType(${rel.TargetEntity.ClassName}) $classGen.formatVariableName(${rel.name})) {
        setToOneTarget("${rel.name}", $classGen.formatVariableName(${rel.name}), true);
    }
#end

    public $classGen.formatJavaType(${rel.TargetEntity.ClassName}) get${classGen.cappedProp}() {
        return ($classGen.formatJavaType(${rel.TargetEntity.ClassName}))readProperty("${rel.name}");
    } 
#end
    
    
#end
}
